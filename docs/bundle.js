(()=>{"use strict";var t,n;!function(t){t.Red="red",t.Pink="pink",t.Purple="purple",t.DeepPurple="deepPurple",t.Indigo="indigo",t.Blue="blue",t.LightBlue="lightBlue",t.Cyan="cyan",t.Teal="teal",t.Green="green",t.LightGreen="lightGreen",t.Lime="lime",t.Yellow="yellow",t.Amber="amber",t.Orange="orange",t.DeepOrange="deepOrange",t.Brown="brown",t.Grey="grey",t.BlueGrey="blueGrey"}(n||(n={}));var e,r,i=((t={})[n.Red]=["#ffebee","#b71c1c"],t[n.Pink]=["#fce4ec","#880e4f"],t[n.Purple]=["#f3e5f5","#4a148c"],t[n.DeepPurple]=["#ede7f6","#311b92"],t[n.Indigo]=["#e8eaf6","#1a237e"],t[n.Blue]=["#e3f2fd","#0d47a1"],t[n.LightBlue]=["#e1f5fe","#01579b"],t[n.Cyan]=["#e0f7fa","#006064"],t[n.Teal]=["#e0f2f1","#004d40"],t[n.Green]=["#e8f5e9","#1b5e20"],t[n.LightGreen]=["#f1f8e9","#33691e"],t[n.Lime]=["#f9fbe7","#827717"],t[n.Yellow]=["#fffde7","#f57f17"],t[n.Amber]=["#fff8e1","#ff6f00"],t[n.Orange]=["#fff3e0","#e65100"],t[n.DeepOrange]=["#fbe9e7","#bf360c"],t[n.Brown]=["#efebe9","#3e2723"],t[n.Grey]=["#fafafa","#212121"],t[n.BlueGrey]=["#eceff1","#263238"],t);!function(t){t.BE="BE",t.BG="BG",t.CZ="CZ",t.DK="DK",t.DE="DE",t.EE="EE",t.IE="IE",t.EL="EL",t.ES="ES",t.FR="FR",t.HR="HR",t.IT="IT",t.CY="CY",t.LV="LV",t.LT="LT",t.LU="LU",t.HU="HU",t.MT="MT",t.NL="NL",t.AT="AT",t.PL="PL",t.PT="PT",t.RO="RO",t.SI="SI",t.SK="SK",t.FI="FI",t.SE="SE"}(e||(e={})),Object.keys(e),function(t){t.Continous="continous",t.Bins="bins"}(r||(r={}));var o=[{country:e.BE,value:5.4},{country:e.BG,value:4.2},{country:e.CZ,value:2},{country:e.DK,value:5},{country:e.DE,value:3.2},{country:e.EE,value:4.4},{country:e.IE,value:5},{country:e.EL,value:17.3},{country:e.ES,value:14.1},{country:e.FR,value:8.5},{country:e.HR,value:6.6},{country:e.IT,value:10},{country:e.CY,value:7.1},{country:e.LV,value:6.3},{country:e.LT,value:6.3},{country:e.LU,value:5.6},{country:e.HU,value:3.4},{country:e.MT,value:3.4},{country:e.NL,value:3.4},{country:e.AT,value:4.5},{country:e.PL,value:3.3},{country:e.PT,value:6.5},{country:e.RO,value:3.9},{country:e.SI,value:4.5},{country:e.SK,value:5.8},{country:e.FI,value:6.7},{country:e.SE,value:6.8}];function a(t,n){let e,r;if(void 0===n)for(const n of t)null!=n&&(void 0===e?n>=n&&(e=r=n):(e>n&&(e=n),r<n&&(r=n)));else{let i=-1;for(let o of t)null!=(o=n(o,++i,t))&&(void 0===e?o>=o&&(e=r=o):(e>o&&(e=o),r<o&&(r=o)))}return[e,r]}var u=Array.prototype,l=u.slice;function s(t,n){return null==t||null==n?NaN:t<n?-1:t>n?1:t>=n?0:NaN}function c(t,n){return null==t||null==n?NaN:n<t?-1:n>t?1:n>=t?0:NaN}function f(t){let n,e,r;function i(t,r,i=0,o=t.length){if(i<o){if(0!==n(r,r))return o;do{const n=i+o>>>1;e(t[n],r)<0?i=n+1:o=n}while(i<o)}return i}return 2!==t.length?(n=s,e=(n,e)=>s(t(n),e),r=(n,e)=>t(n)-e):(n=t===s||t===c?t:h,e=t,r=t),{left:i,center:function(t,n,e=0,o=t.length){const a=i(t,n,e,o-1);return a>e&&r(t[a-1],n)>-r(t[a],n)?a-1:a},right:function(t,r,i=0,o=t.length){if(i<o){if(0!==n(r,r))return o;do{const n=i+o>>>1;e(t[n],r)<=0?i=n+1:o=n}while(i<o)}return i}}}function h(){return 0}u.map;const p=f(s),d=p.right,y=(p.left,f((function(t){return null===t?NaN:+t})).center,d);function v(t){return()=>t}function g(t){return t}var m=Math.sqrt(50),w=Math.sqrt(10),_=Math.sqrt(2);function b(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=x(t,n,e))||!isFinite(a))return[];if(a>0){let e=Math.round(t/a),r=Math.round(n/a);for(e*a<t&&++e,r*a>n&&--r,o=new Array(i=r-e+1);++u<i;)o[u]=(e+u)*a}else{a=-a;let e=Math.round(t*a),r=Math.round(n*a);for(e/a<t&&++e,r/a>n&&--r,o=new Array(i=r-e+1);++u<i;)o[u]=(e+u)/a}return r&&o.reverse(),o}function x(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=m?10:o>=w?5:o>=_?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=m?10:o>=w?5:o>=_?2:1)}function M(t){return Math.ceil(Math.log(function(t,n){let e=0;for(let n of t)null!=n&&(n=+n)>=n&&++e;return e}(t))/Math.LN2)+1}function A(){}function k(t){return null==t?A:function(){return this.querySelector(t)}}function N(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function E(){return[]}function S(t){return null==t?E:function(){return this.querySelectorAll(t)}}function L(t){return function(){return this.matches(t)}}function C(t){return function(n){return n.matches(t)}}var $=Array.prototype.find;function D(){return this.firstElementChild}var P=Array.prototype.filter;function T(){return Array.from(this.children)}function q(t){return new Array(t.length)}function B(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function I(t){return function(){return t}}function O(t,n,e,r,i,o){for(var a,u=0,l=n.length,s=o.length;u<s;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new B(t,o[u]);for(;u<l;++u)(a=n[u])&&(i[u]=a)}function R(t,n,e,r,i,o,a){var u,l,s,c=new Map,f=n.length,h=o.length,p=new Array(f);for(u=0;u<f;++u)(l=n[u])&&(p[u]=s=a.call(l,l.__data__,u,n)+"",c.has(s)?i[u]=l:c.set(s,l));for(u=0;u<h;++u)s=a.call(t,o[u],u,o)+"",(l=c.get(s))?(r[u]=l,l.__data__=o[u],c.delete(s)):e[u]=new B(t,o[u]);for(u=0;u<f;++u)(l=n[u])&&c.get(p[u])===l&&(i[u]=l)}function j(t){return t.__data__}function X(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function H(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}B.prototype={constructor:B,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Y="http://www.w3.org/1999/xhtml";const F={svg:"http://www.w3.org/2000/svg",xhtml:Y,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function G(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),F.hasOwnProperty(n)?{space:F[n],local:t}:t}function z(t){return function(){this.removeAttribute(t)}}function U(t){return function(){this.removeAttributeNS(t.space,t.local)}}function V(t,n){return function(){this.setAttribute(t,n)}}function K(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Z(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function W(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function J(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Q(t){return function(){this.style.removeProperty(t)}}function tt(t,n,e){return function(){this.style.setProperty(t,n,e)}}function nt(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function et(t,n){return t.style.getPropertyValue(n)||J(t).getComputedStyle(t,null).getPropertyValue(n)}function rt(t){return function(){delete this[t]}}function it(t,n){return function(){this[t]=n}}function ot(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function at(t){return t.trim().split(/^|\s+/)}function ut(t){return t.classList||new lt(t)}function lt(t){this._node=t,this._names=at(t.getAttribute("class")||"")}function st(t,n){for(var e=ut(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function ct(t,n){for(var e=ut(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function ft(t){return function(){st(this,t)}}function ht(t){return function(){ct(this,t)}}function pt(t,n){return function(){(n.apply(this,arguments)?st:ct)(this,t)}}function dt(){this.textContent=""}function yt(t){return function(){this.textContent=t}}function vt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function gt(){this.innerHTML=""}function mt(t){return function(){this.innerHTML=t}}function wt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function _t(){this.nextSibling&&this.parentNode.appendChild(this)}function bt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function xt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===Y&&n.documentElement.namespaceURI===Y?n.createElement(t):n.createElementNS(e,t)}}function Mt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function At(t){var n=G(t);return(n.local?Mt:xt)(n)}function kt(){return null}function Nt(){var t=this.parentNode;t&&t.removeChild(this)}function Et(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function St(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function Lt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Ct(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function $t(t,n,e){return function(){var r,i=this.__on,o=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var a=0,u=i.length;a<u;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=e),void(r.value=n);this.addEventListener(t.type,o,e),r={type:t.type,name:t.name,value:n,listener:o,options:e},i?i.push(r):this.__on=[r]}}function Dt(t,n,e){var r=J(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Pt(t,n){return function(){return Dt(this,t,n)}}function Tt(t,n){return function(){return Dt(this,t,n.apply(this,arguments))}}lt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var qt=[null];function Bt(t,n){this._groups=t,this._parents=n}function It(){return new Bt([[document.documentElement]],qt)}Bt.prototype=It.prototype={constructor:Bt,select:function(t){"function"!=typeof t&&(t=k(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],l=u.length,s=r[i]=new Array(l),c=0;c<l;++c)(o=u[c])&&(a=t.call(o,o.__data__,c,u))&&("__data__"in o&&(a.__data__=o.__data__),s[c]=a);return new Bt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return N(t.apply(this,arguments))}}(t):S(t);for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],l=u.length,s=0;s<l;++s)(a=u[s])&&(r.push(t.call(a,a.__data__,s,u)),i.push(a));return new Bt(r,i)},selectChild:function(t){return this.select(null==t?D:function(t){return function(){return $.call(this.children,t)}}("function"==typeof t?t:C(t)))},selectChildren:function(t){return this.selectAll(null==t?T:function(t){return function(){return P.call(this.children,t)}}("function"==typeof t?t:C(t)))},filter:function(t){"function"!=typeof t&&(t=L(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,l=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&l.push(o);return new Bt(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,j);var e=n?R:O,r=this._parents,i=this._groups;"function"!=typeof t&&(t=I(t));for(var o=i.length,a=new Array(o),u=new Array(o),l=new Array(o),s=0;s<o;++s){var c=r[s],f=i[s],h=f.length,p=X(t.call(c,c&&c.__data__,s,r)),d=p.length,y=u[s]=new Array(d),v=a[s]=new Array(d),g=l[s]=new Array(h);e(c,f,y,v,g,p,n);for(var m,w,_=0,b=0;_<d;++_)if(m=y[_]){for(_>=b&&(b=_+1);!(w=v[b])&&++b<d;);m._next=w||null}}return(a=new Bt(a,r))._enter=u,a._exit=l,a},enter:function(){return new Bt(this._enter||this._groups.map(q),this._parents)},exit:function(){return new Bt(this._exit||this._groups.map(q),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=n&&(i=n(i))&&(i=i.selection()),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=t.selection?t.selection():t,e=this._groups,r=n._groups,i=e.length,o=r.length,a=Math.min(i,o),u=new Array(i),l=0;l<a;++l)for(var s,c=e[l],f=r[l],h=c.length,p=u[l]=new Array(h),d=0;d<h;++d)(s=c[d]||f[d])&&(p[d]=s);for(;l<i;++l)u[l]=e[l];return new Bt(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=H);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],l=u.length,s=i[o]=new Array(l),c=0;c<l;++c)(a=u[c])&&(s[c]=a);s.sort(n)}return new Bt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=G(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?U:z:"function"==typeof n?e.local?W:Z:e.local?K:V)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Q:"function"==typeof n?nt:tt)(t,n,null==e?"":e)):et(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?rt:"function"==typeof n?ot:it)(t,n)):this.node()[t]},classed:function(t,n){var e=at(t+"");if(arguments.length<2){for(var r=ut(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?pt:n?ft:ht)(e,n))},text:function(t){return arguments.length?this.each(null==t?dt:("function"==typeof t?vt:yt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?gt:("function"==typeof t?wt:mt)(t)):this.node().innerHTML},raise:function(){return this.each(_t)},lower:function(){return this.each(bt)},append:function(t){var n="function"==typeof t?t:At(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:At(t),r=null==n?kt:"function"==typeof n?n:k(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Nt)},clone:function(t){return this.select(t?St:Et)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Lt(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?$t:Ct,r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var l,s=0,c=u.length;s<c;++s)for(r=0,l=u[s];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,n){return this.each(("function"==typeof n?Tt:Pt)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const Ot=It;var Rt={value:()=>{}};function jt(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Xt(r)}function Xt(t){this._=t}function Ht(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function Yt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Ft(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Rt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}Xt.prototype=jt.prototype={constructor:Xt,on:function(t,n){var e,r=this._,i=Ht(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=Ft(r[e],t.name,n);else if(null==n)for(e in r)r[e]=Ft(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=Yt(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Xt(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const Gt=jt;var zt,Ut,Vt=0,Kt=0,Zt=0,Wt=0,Jt=0,Qt=0,tn="object"==typeof performance&&performance.now?performance:Date,nn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function en(){return Jt||(nn(rn),Jt=tn.now()+Qt)}function rn(){Jt=0}function on(){this._call=this._time=this._next=null}function an(t,n,e){var r=new on;return r.restart(t,n,e),r}function un(){Jt=(Wt=tn.now())+Qt,Vt=Kt=0;try{!function(){en(),++Vt;for(var t,n=zt;n;)(t=Jt-n._time)>=0&&n._call.call(void 0,t),n=n._next;--Vt}()}finally{Vt=0,function(){for(var t,n,e=zt,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:zt=n);Ut=t,sn(r)}(),Jt=0}}function ln(){var t=tn.now(),n=t-Wt;n>1e3&&(Qt-=n,Wt=t)}function sn(t){Vt||(Kt&&(Kt=clearTimeout(Kt)),t-Jt>24?(t<1/0&&(Kt=setTimeout(un,t-tn.now()-Qt)),Zt&&(Zt=clearInterval(Zt))):(Zt||(Wt=tn.now(),Zt=setInterval(ln,1e3)),Vt=1,nn(un)))}function cn(t,n,e){var r=new on;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}on.prototype=an.prototype={constructor:on,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?en():+e)+(null==n?0:+n),this._next||Ut===this||(Ut?Ut._next=this:zt=this,Ut=this),this._call=t,this._time=e,sn()},stop:function(){this._call&&(this._call=null,this._time=1/0,sn())}};var fn=Gt("start","end","cancel","interrupt"),hn=[];function pn(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(l){var s,c,f,h;if(1!==e.state)return u();for(s in i)if((h=i[s]).name===e.name){if(3===h.state)return cn(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(cn((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(l))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),s=0,c=-1;s<f;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=h);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=an((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:fn,tween:hn,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function dn(t,n){var e=vn(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function yn(t,n){var e=vn(t,n);if(e.state>3)throw new Error("too late; already running");return e}function vn(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function gn(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}var mn,wn=180/Math.PI,_n={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function bn(t,n,e,r,i,o){var a,u,l;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(l=t*e+n*r)&&(e-=t*l,r-=n*l),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,l/=u),t*r<n*e&&(t=-t,n=-n,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*wn,skewX:Math.atan(l)*wn,scaleX:a,scaleY:u}}function xn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],l=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var l=a.push("translate(",null,n,null,e);u.push({i:l-4,x:gn(t,i)},{i:l-2,x:gn(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,l),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:gn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,l),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:gn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,l),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:gn(t,e)},{i:u-2,x:gn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,l),o=a=null,function(t){for(var n,e=-1,r=l.length;++e<r;)u[(n=l[e]).i]=n.x(t);return u.join("")}}}var Mn=xn((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?_n:bn(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),An=xn((function(t){return null==t?_n:(mn||(mn=document.createElementNS("http://www.w3.org/2000/svg","g")),mn.setAttribute("transform",t),(t=mn.transform.baseVal.consolidate())?bn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):_n)}),", ",")",")");function kn(t,n){var e,r;return function(){var i=yn(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function Nn(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=yn(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},l=0,s=i.length;l<s;++l)if(i[l].name===n){i[l]=u;break}l===s&&i.push(u)}o.tween=i}}function En(t,n,e){var r=t._id;return t.each((function(){var t=yn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return vn(t,r).value[n]}}function Sn(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Ln(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Cn(){}var $n=.7,Dn=1/$n,Pn="\\s*([+-]?\\d+)\\s*",Tn="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",qn="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Bn=/^#([0-9a-f]{3,8})$/,In=new RegExp(`^rgb\\(${Pn},${Pn},${Pn}\\)$`),On=new RegExp(`^rgb\\(${qn},${qn},${qn}\\)$`),Rn=new RegExp(`^rgba\\(${Pn},${Pn},${Pn},${Tn}\\)$`),jn=new RegExp(`^rgba\\(${qn},${qn},${qn},${Tn}\\)$`),Xn=new RegExp(`^hsl\\(${Tn},${qn},${qn}\\)$`),Hn=new RegExp(`^hsla\\(${Tn},${qn},${qn},${Tn}\\)$`),Yn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Fn(){return this.rgb().formatHex()}function Gn(){return this.rgb().formatRgb()}function zn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Bn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Un(n):3===e?new Wn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Vn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Vn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=In.exec(t))?new Wn(n[1],n[2],n[3],1):(n=On.exec(t))?new Wn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Rn.exec(t))?Vn(n[1],n[2],n[3],n[4]):(n=jn.exec(t))?Vn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Xn.exec(t))?re(n[1],n[2]/100,n[3]/100,1):(n=Hn.exec(t))?re(n[1],n[2]/100,n[3]/100,n[4]):Yn.hasOwnProperty(t)?Un(Yn[t]):"transparent"===t?new Wn(NaN,NaN,NaN,0):null}function Un(t){return new Wn(t>>16&255,t>>8&255,255&t,1)}function Vn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Wn(t,n,e,r)}function Kn(t){return t instanceof Cn||(t=zn(t)),t?new Wn((t=t.rgb()).r,t.g,t.b,t.opacity):new Wn}function Zn(t,n,e,r){return 1===arguments.length?Kn(t):new Wn(t,n,e,null==r?1:r)}function Wn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Jn(){return`#${ee(this.r)}${ee(this.g)}${ee(this.b)}`}function Qn(){const t=te(this.opacity);return`${1===t?"rgb(":"rgba("}${ne(this.r)}, ${ne(this.g)}, ${ne(this.b)}${1===t?")":`, ${t})`}`}function te(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function ne(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function ee(t){return((t=ne(t))<16?"0":"")+t.toString(16)}function re(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new oe(t,n,e,r)}function ie(t){if(t instanceof oe)return new oe(t.h,t.s,t.l,t.opacity);if(t instanceof Cn||(t=zn(t)),!t)return new oe;if(t instanceof oe)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,l=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=l<.5?o+i:2-o-i,a*=60):u=l>0&&l<1?0:a,new oe(a,u,l,t.opacity)}function oe(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ae(t){return(t=(t||0)%360)<0?t+360:t}function ue(t){return Math.max(0,Math.min(1,t||0))}function le(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function se(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}Sn(Cn,zn,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:Fn,formatHex:Fn,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return ie(this).formatHsl()},formatRgb:Gn,toString:Gn}),Sn(Wn,Zn,Ln(Cn,{brighter(t){return t=null==t?Dn:Math.pow(Dn,t),new Wn(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?$n:Math.pow($n,t),new Wn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new Wn(ne(this.r),ne(this.g),ne(this.b),te(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Jn,formatHex:Jn,formatHex8:function(){return`#${ee(this.r)}${ee(this.g)}${ee(this.b)}${ee(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Qn,toString:Qn})),Sn(oe,(function(t,n,e,r){return 1===arguments.length?ie(t):new oe(t,n,e,null==r?1:r)}),Ln(Cn,{brighter(t){return t=null==t?Dn:Math.pow(Dn,t),new oe(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?$n:Math.pow($n,t),new oe(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Wn(le(t>=240?t-240:t+120,i,r),le(t,i,r),le(t<120?t+240:t-120,i,r),this.opacity)},clamp(){return new oe(ae(this.h),ue(this.s),ue(this.l),te(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=te(this.opacity);return`${1===t?"hsl(":"hsla("}${ae(this.h)}, ${100*ue(this.s)}%, ${100*ue(this.l)}%${1===t?")":`, ${t})`}`}}));const ce=t=>()=>t;function fe(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):ce(isNaN(t)?n:t)}const he=function t(n){var e=function(t){return 1==(t=+t)?fe:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ce(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Zn(t)).r,(n=Zn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=fe(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function pe(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=Zn(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}pe((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return se((e-r/n)*n,a,i,o,u)}})),pe((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return se((e-r/n)*n,i,o,a,u)}}));var de=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ye=new RegExp(de.source,"g");function ve(t,n){var e,r,i,o=de.lastIndex=ye.lastIndex=0,a=-1,u=[],l=[];for(t+="",n+="";(e=de.exec(t))&&(r=ye.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,l.push({i:a,x:gn(e,r)})),o=ye.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?l[0]?function(t){return function(n){return t(n)+""}}(l[0].x):function(t){return function(){return t}}(n):(n=l.length,function(t){for(var e,r=0;r<n;++r)u[(e=l[r]).i]=e.x(t);return u.join("")})}function ge(t,n){var e;return("number"==typeof n?gn:n instanceof zn?he:(e=zn(n))?(n=e,he):ve)(t,n)}function me(t){return function(){this.removeAttribute(t)}}function we(t){return function(){this.removeAttributeNS(t.space,t.local)}}function _e(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function be(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function xe(t,n,e){var r,i,o;return function(){var a,u,l=e(this);if(null!=l)return(a=this.getAttribute(t))===(u=l+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,l));this.removeAttribute(t)}}function Me(t,n,e){var r,i,o;return function(){var a,u,l=e(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(u=l+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,l));this.removeAttributeNS(t.space,t.local)}}function Ae(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function ke(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Ne(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&ke(t,i)),e}return i._value=n,i}function Ee(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Ae(t,i)),e}return i._value=n,i}function Se(t,n){return function(){dn(this,t).delay=+n.apply(this,arguments)}}function Le(t,n){return n=+n,function(){dn(this,t).delay=n}}function Ce(t,n){return function(){yn(this,t).duration=+n.apply(this,arguments)}}function $e(t,n){return n=+n,function(){yn(this,t).duration=n}}function De(t,n){if("function"!=typeof n)throw new Error;return function(){yn(this,t).ease=n}}function Pe(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?dn:yn;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var Te=Ot.prototype.constructor;function qe(t){return function(){this.style.removeProperty(t)}}function Be(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Ie(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&Be(t,o,e)),r}return o._value=n,o}function Oe(t){return function(n){this.textContent=t.call(this,n)}}function Re(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Oe(r)),n}return r._value=t,r}var je=0;function Xe(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function He(){return++je}var Ye=Ot.prototype;Xe.prototype=function(t){return Ot().transition(t)}.prototype={constructor:Xe,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=k(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,l,s=r[a],c=s.length,f=o[a]=new Array(c),h=0;h<c;++h)(u=s[h])&&(l=t.call(u,u.__data__,h,s))&&("__data__"in u&&(l.__data__=u.__data__),f[h]=l,pn(f[h],n,e,h,f,vn(u,e)));return new Xe(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=S(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var l,s=r[u],c=s.length,f=0;f<c;++f)if(l=s[f]){for(var h,p=t.call(l,l.__data__,f,s),d=vn(l,e),y=0,v=p.length;y<v;++y)(h=p[y])&&pn(h,n,e,y,p,d);o.push(p),a.push(l)}return new Xe(o,a,n,e)},selectChild:Ye.selectChild,selectChildren:Ye.selectChildren,filter:function(t){"function"!=typeof t&&(t=L(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,l=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&l.push(o);return new Xe(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var l,s=n[u],c=e[u],f=s.length,h=a[u]=new Array(f),p=0;p<f;++p)(l=s[p]||c[p])&&(h[p]=l);for(;u<r;++u)a[u]=n[u];return new Xe(a,this._parents,this._name,this._id)},selection:function(){return new Te(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=He(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],l=u.length,s=0;s<l;++s)if(a=u[s]){var c=vn(a,n);pn(a,t,e,s,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Xe(r,this._parents,t,e)},call:Ye.call,nodes:Ye.nodes,node:Ye.node,size:Ye.size,empty:Ye.empty,each:Ye.each,on:function(t,n){var e=this._id;return arguments.length<2?vn(this.node(),e).on.on(t):this.each(Pe(e,t,n))},attr:function(t,n){var e=G(t),r="transform"===e?An:ge;return this.attrTween(t,"function"==typeof n?(e.local?Me:xe)(e,r,En(this,"attr."+t,n)):null==n?(e.local?we:me)(e):(e.local?be:_e)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=G(t);return this.tween(e,(r.local?Ne:Ee)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Mn:ge;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=et(this,t),a=(this.style.removeProperty(t),et(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,qe(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=et(this,t),u=e(this),l=u+"";return null==u&&(this.style.removeProperty(t),l=u=et(this,t)),a===l?null:a===r&&l===i?o:(i=l,o=n(r=a,u))}}(t,r,En(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var l=yn(this,t),s=l.on,c=null==l.value[a]?o||(o=qe(n)):void 0;s===e&&i===c||(r=(e=s).copy()).on(u,i=c),l.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=et(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Ie(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(En(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Re(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=vn(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?kn:Nn)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Se:Le)(n,t)):vn(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ce:$e)(n,t)):vn(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(De(n,t)):vn(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;yn(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},l={value:function(){0==--i&&o()}};e.each((function(){var e=yn(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(l)),e.on=n})),0===i&&o()}))},[Symbol.iterator]:Ye[Symbol.iterator]};var Fe={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ge(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}Ot.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},Ot.prototype.transition=function(t){var n,e;t instanceof Xe?(n=t._id,t=t._name):(n=He(),(e=Fe).time=en(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],l=u.length,s=0;s<l;++s)(a=u[s])&&pn(a,t,n,s,u,e||Ge(a,n));return new Xe(r,this._parents,t,n)};const{abs:ze,max:Ue,min:Ve}=Math;function Ke(t){return{type:t}}function Ze(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=tr(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}function We(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function Je(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=tr(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}function Qe(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}}function tr(t,n){var e,r,i=typeof n;return null==n||"boolean"===i?ce(n):("number"===i?gn:"string"===i?(e=zn(n))?(n=e,he):ve:n instanceof zn?he:n instanceof Date?We:(r=n,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(n)?Ze:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Je:gn:Qe))(t,n)}function nr(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}function er(t){return+t}["w","e"].map(Ke),["n","s"].map(Ke),["n","w","e","s","nw","ne","sw","se"].map(Ke);var rr=[0,1];function ir(t){return t}function or(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function ar(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=or(i,r),o=e(a,o)):(r=or(r,i),o=e(o,a)),function(t){return o(r(t))}}function ur(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=or(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=y(t,n,1,r)-1;return o[e](i[e](n))}}function lr(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function sr(){return function(){var t,n,e,r,i,o,a=rr,u=rr,l=tr,s=ir;function c(){var t,n,e,l=Math.min(a.length,u.length);return s!==ir&&(t=a[0],n=a[l-1],t>n&&(e=t,t=n,n=e),s=function(e){return Math.max(t,Math.min(n,e))}),r=l>2?ur:ar,i=o=null,f}function f(n){return null==n||isNaN(n=+n)?e:(i||(i=r(a.map(t),u,l)))(t(s(n)))}return f.invert=function(e){return s(n((o||(o=r(u,a.map(t),gn)))(e)))},f.domain=function(t){return arguments.length?(a=Array.from(t,er),c()):a.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),c()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),l=nr,c()},f.clamp=function(t){return arguments.length?(s=!!t||ir,c()):s!==ir},f.interpolate=function(t){return arguments.length?(l=t,c()):l},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,c()}}()(ir,ir)}function cr(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var fr,hr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function pr(t){if(!(n=hr.exec(t)))throw new Error("invalid format: "+t);var n;return new dr({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function dr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function yr(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function vr(t){return(t=yr(Math.abs(t)))?t[1]:NaN}function gr(t,n){var e=yr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}pr.prototype=dr.prototype,dr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const mr={"%":(t,n)=>(100*t).toFixed(n),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,n)=>t.toExponential(n),f:(t,n)=>t.toFixed(n),g:(t,n)=>t.toPrecision(n),o:t=>Math.round(t).toString(8),p:(t,n)=>gr(100*t,n),r:gr,s:function(t,n){var e=yr(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(fr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+yr(t,Math.max(0,n+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function wr(t){return t}var _r,br,xr,Mr=Array.prototype.map,Ar=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function kr(t){var n=t.domain;return t.ticks=function(t){var e=n();return b(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return function(t,n,e,r){var i,o=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=m?i*=10:o>=w?i*=5:o>=_&&(i*=2),n<t?-i:i}(t,n,e);switch((r=pr(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(vr(n)/3)))-vr(Math.abs(t)))}(o,a))||(r.precision=i),xr(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,vr(n)-vr(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-vr(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return br(r)}(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i,o=n(),a=0,u=o.length-1,l=o[a],s=o[u],c=10;for(s<l&&(i=l,l=s,s=i,i=a,a=u,u=i);c-- >0;){if((i=x(l,s,e))===r)return o[a]=l,o[u]=s,n(o);if(i>0)l=Math.floor(l/i)*i,s=Math.ceil(s/i)*i;else{if(!(i<0))break;l=Math.ceil(l*i)/i,s=Math.floor(s*i)/i}r=i}return t},t}function Nr(){var t=sr();return t.copy=function(){return lr(t,Nr())},cr.apply(t,arguments),kr(t)}function Er(t){return"string"==typeof t?new Bt([[document.querySelector(t)]],[document.documentElement]):new Bt([[t]],qt)}function Sr(t,n,e){this.k=t,this.x=n,this.y=e}_r=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?wr:(n=Mr.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=n[0],l=0;i>0&&u>0&&(l+u+1>r&&(u=Math.max(1,r-l)),o.push(t.substring(i-=u,i+u)),!((l+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?wr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(Mr.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=pr(t)).fill,e=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,y=t.comma,v=t.precision,g=t.trim,m=t.type;"n"===m?(y=!0,m="g"):mr[m]||(void 0===v&&(v=12),g=!0,m="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var w="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",_="$"===h?o:/[%p]/.test(m)?l:"",b=mr[m],x=/[defgprs%]/.test(m);function M(t){var i,o,l,h=w,M=_;if("c"===m)M=b(t)+M,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:b(Math.abs(t),v),g&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),A&&0==+t&&"+"!==f&&(A=!1),h=(A?"("===f?f:s:"-"===f||"("===f?"":f)+h,M=("s"===m?Ar[8+fr/3]:"")+M+(A&&"("===f?")":""),x)for(i=-1,o=t.length;++i<o;)if(48>(l=t.charCodeAt(i))||l>57){M=(46===l?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}y&&!p&&(t=r(t,1/0));var k=h.length+t.length+M.length,N=k<d?new Array(d-k+1).join(n):"";switch(y&&p&&(t=r(N+t,N.length?d-M.length:1/0),N=""),e){case"<":t=h+t+M+N;break;case"=":t=h+N+t+M;break;case"^":t=N.slice(0,k=N.length>>1)+h+t+M+N.slice(k);break;default:t=N+h+t+M}return u(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),M.toString=function(){return t+""},M}return{format:f,formatPrefix:function(t,n){var e=f(((t=pr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(vr(n)/3))),i=Math.pow(10,-r),o=Ar[8+r/3];return function(t){return e(i*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),br=_r.format,xr=_r.formatPrefix,Sr.prototype={constructor:Sr,scale:function(t){return 1===t?this:new Sr(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Sr(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Sr(1,0,0),Sr.prototype;var Lr=function(t){switch(t){case"EL":return"gr";default:return t.toLowerCase()}},Cr=function(){var t=this;this.data=o,this.onPaletteChange=function(){t.redrawChart()},this.onModeChange=function(){t.redrawChart()},this.onSelectData=function(){t.selectDataInput.click()},this.onDataChange=function(n){return e=t,r=void 0,o=function(){var t,e;return function(t,n){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}(this,(function(r){return(t=n.target).files&&((e=new FileReader).readAsText(t.files[0]),e.onload=this.onDataLoaded),[2]}))},new((i=void 0)||(i=Promise))((function(t,n){function a(t){try{l(o.next(t))}catch(t){n(t)}}function u(t){try{l(o.throw(t))}catch(t){n(t)}}function l(n){n.done?t(n.value):function(t){return t instanceof i?t:new i((function(n){n(t)}))}(n.value).then(a,u)}l((o=o.apply(e,r||[])).next())}));var e,r,i,o},this.onDataLoaded=function(n){var e=String(n.target.result).split("\n").map((function(t){return{country:t.slice(0,2),value:Number.parseFloat(t.slice(3).replace(/\"/g,"").replace(",","."))}}));t.data=e,t.redrawChart()},this.onDownloadChart=function(){var n=new Blob([t.mapSvg.outerHTML]);t.downloadChartLink.href=URL.createObjectURL(n),t.downloadChartLink.click()},this.redrawChart=function(){if(0!==t.data.length){var n=t.paletteSelect.value,e=t.modeSelect.value;e==r.Bins?function(t,n,e){var r=function(){var t=g,n=a,e=M;function r(r){Array.isArray(r)||(r=Array.from(r));var i,o,u,l=r.length,s=new Array(l);for(i=0;i<l;++i)s[i]=t(r[i],i,r);var c=n(s),f=c[0],h=c[1],p=e(s,f,h);if(!Array.isArray(p)){const t=h,e=+p;if(n===a&&([f,h]=function(t,n,e){let r;for(;;){const i=x(t,n,e);if(i===r||0===i||!isFinite(i))return[t,n];i>0?(t=Math.floor(t/i)*i,n=Math.ceil(n/i)*i):i<0&&(t=Math.ceil(t*i)/i,n=Math.floor(n*i)/i),r=i}}(f,h,e)),(p=b(f,h,e))[0]<=f&&(u=x(f,h,e)),p[p.length-1]>=h)if(t>=h&&n===a){const t=x(f,h,e);isFinite(t)&&(t>0?h=(Math.floor(h/t)+1)*t:t<0&&(h=(Math.ceil(h*-t)+1)/-t))}else p.pop()}for(var d=p.length;p[0]<=f;)p.shift(),--d;for(;p[d-1]>h;)p.pop(),--d;var v,g=new Array(d+1);for(i=0;i<=d;++i)(v=g[i]=[]).x0=i>0?p[i-1]:f,v.x1=i<d?p[i]:h;if(isFinite(u)){if(u>0)for(i=0;i<l;++i)null!=(o=s[i])&&f<=o&&o<=h&&g[Math.min(d,Math.floor((o-f)/u))].push(r[i]);else if(u<0)for(i=0;i<l;++i)if(null!=(o=s[i])&&f<=o&&o<=h){const t=Math.floor((f-o)*u);g[Math.min(d,t+(p[t]<=o))].push(r[i])}}else for(i=0;i<l;++i)null!=(o=s[i])&&f<=o&&o<=h&&g[y(p,o,0,d)].push(r[i]);return g}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:v(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:v([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?v(l.call(t)):v(t),r):e},r}().value((function(t){return t.value}))(n),o=Nr().domain([0,r.length]).range(i[e]);r.forEach((function(t,n){var e=o(n);t.forEach((function(t){var n=t.country,r=Lr(n),i=document.querySelector("#".concat(r));i&&(i.style.fill=String(e))}))})),Er(t).selectAll("path").style("stroke","#aaaaaa");var u=function(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))}([null],r,!0),s=Er(t).select("#chart-legend");s.selectAll("*").remove(),s.append("text").text("Legenda:").attr("x",87).attr("y",9).style("font-size","4px");var c=s.selectAll("item").data(u).enter().append("g");c.append("rect").attr("x",87).attr("y",(function(t,n){return 5+6*(n+1)})).attr("width",5).attr("height",5).attr("fill",(function(t,n){return t?o(n):"#eeeeee"})).style("stroke-width",.1).style("stroke","#555"),c.append("text").attr("x",93).attr("y",(function(t,n){return 5+6*(n+1)+3.5})).style("font-size","3px").text((function(t){return t?"".concat(t.x0," - ").concat(t.x1):"Dáta nedostupné"}))}(t.mapSvg,t.data,n):e===r.Continous&&function(t,n,e){var r=a(n,(function(t){return t.value})),o=r[0],u=r[1],l=Nr().domain([o,u]).range(i[e]);n.forEach((function(t){var n=t.country,e=t.value,r=Lr(n);Er("#".concat(r)).style("fill",l(e))})),Er(t).select("#chart-legend").selectAll("*").remove()}(t.mapSvg,t.data,n)}},this.initElements=function(){t.selectDataInput=document.querySelector("#upload-data-input"),t.selectDataButton=document.querySelector("#upload-data-button"),t.downloadChartButton=document.querySelector("#download-chart-button"),t.downloadChartLink=document.querySelector("#download-chart-link"),t.paletteSelect=document.querySelector("#palette-select"),t.modeSelect=document.querySelector("#mode-select"),t.mapSvg=document.querySelector("#eu-map")},this.initListeners=function(){t.selectDataButton.addEventListener("click",t.onSelectData),t.selectDataInput.addEventListener("change",t.onDataChange),t.downloadChartButton.addEventListener("click",t.onDownloadChart),t.paletteSelect.addEventListener("click",t.onPaletteChange),t.modeSelect.addEventListener("click",t.onModeChange)}};document.addEventListener("DOMContentLoaded",(function(){var t;(t=new Cr).initElements(),t.initListeners(),t.redrawChart()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldS12aXMvLi9zcmMvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vc3JjL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2V4dGVudC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FycmF5LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZGVzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdG9yLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL3N0dXJnZXMuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9jb3VudC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tYXRjaGVyLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RDaGlsZC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0Q2hpbGRyZW4uanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NwYXJzZS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdGEuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NvcnQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvd2luZG93LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3RleHQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9sb3dlci5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbnNlcnQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29uLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2pvaW4uanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hcHBlbmQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2Rpc3BhdGNoLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NjaGVkdWxlLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9wYXJzZS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90d2Vlbi5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2NvbG9yLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXMuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcmdiLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXNDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyVHdlZW4uanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZGVsYXkuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZHVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9vbi5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0VHdlZW4uanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlVmFyeWluZy5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lbmQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW50ZXJydXB0LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9icnVzaC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2FycmF5LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlckFycmF5LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yb3VuZC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnRpbnVvdXMuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2luaXQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0U3BlY2lmaWVyLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0RGVjaW1hbC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbGluZWFyLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uRml4ZWQuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0R3JvdXAuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0TnVtZXJhbHMuanMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9zcmMvY2hhcnRzL2hlbHBlcnMudHMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vZXUtdmlzLy4vc3JjL2NoYXJ0cy9iaW5zLnRzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmluLmpzIiwid2VicGFjazovL2V1LXZpcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbmljZS5qcyIsIndlYnBhY2s6Ly9ldS12aXMvLi9zcmMvY2hhcnRzL2NvbnRpbm91cy50cyJdLCJuYW1lcyI6WyJQYWxldHRlIiwiQ291bnRyeSIsIk1PREUiLCJQQUxFVFRFUyIsIlJlZCIsIlBpbmsiLCJQdXJwbGUiLCJEZWVwUHVycGxlIiwiSW5kaWdvIiwiQmx1ZSIsIkxpZ2h0Qmx1ZSIsIkN5YW4iLCJUZWFsIiwiR3JlZW4iLCJMaWdodEdyZWVuIiwiTGltZSIsIlllbGxvdyIsIkFtYmVyIiwiT3JhbmdlIiwiRGVlcE9yYW5nZSIsIkJyb3duIiwiR3JleSIsIkJsdWVHcmV5IiwiT2JqZWN0Iiwia2V5cyIsIlNBTVBMRV9EQVRBIiwiY291bnRyeSIsIkJFIiwidmFsdWUiLCJCRyIsIkNaIiwiREsiLCJERSIsIkVFIiwiSUUiLCJFTCIsIkVTIiwiRlIiLCJIUiIsIklUIiwiQ1kiLCJMViIsIkxUIiwiTFUiLCJIVSIsIk1UIiwiTkwiLCJBVCIsIlBMIiwiUFQiLCJSTyIsIlNJIiwiU0siLCJGSSIsIlNFIiwiZXh0ZW50IiwidmFsdWVzIiwidmFsdWVvZiIsIm1pbiIsIm1heCIsInVuZGVmaW5lZCIsImluZGV4IiwiYXJyYXkiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiYXNjZW5kaW5nIiwiYSIsImIiLCJOYU4iLCJkZXNjZW5kaW5nIiwiYmlzZWN0b3IiLCJmIiwiY29tcGFyZTEiLCJjb21wYXJlMiIsImRlbHRhIiwibGVmdCIsIngiLCJsbyIsImhpIiwibGVuZ3RoIiwibWlkIiwiZCIsInplcm8iLCJjZW50ZXIiLCJpIiwicmlnaHQiLCJtYXAiLCJhc2NlbmRpbmdCaXNlY3QiLCJiaXNlY3RSaWdodCIsImUxMCIsIk1hdGgiLCJzcXJ0IiwiZTUiLCJlMiIsInRpY2tzIiwic3RhcnQiLCJzdG9wIiwiY291bnQiLCJyZXZlcnNlIiwibiIsInN0ZXAiLCJ0aWNrSW5jcmVtZW50IiwiaXNGaW5pdGUiLCJyMCIsInJvdW5kIiwicjEiLCJwb3dlciIsImZsb29yIiwibG9nIiwiTE4xMCIsImVycm9yIiwicG93IiwidGhyZXNob2xkU3R1cmdlcyIsImNlaWwiLCJMTjIiLCJub25lIiwic2VsZWN0b3IiLCJ0aGlzIiwicXVlcnlTZWxlY3RvciIsImlzQXJyYXkiLCJmcm9tIiwiZW1wdHkiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWF0Y2hlcyIsImNoaWxkTWF0Y2hlciIsIm5vZGUiLCJmaW5kIiwiY2hpbGRGaXJzdCIsImZpcnN0RWxlbWVudENoaWxkIiwiZmlsdGVyIiwiY2hpbGRyZW4iLCJ1cGRhdGUiLCJFbnRlck5vZGUiLCJwYXJlbnQiLCJkYXR1bSIsIm93bmVyRG9jdW1lbnQiLCJuYW1lc3BhY2VVUkkiLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsImJpbmRJbmRleCIsImdyb3VwIiwiZW50ZXIiLCJleGl0IiwiZGF0YSIsImdyb3VwTGVuZ3RoIiwiZGF0YUxlbmd0aCIsImJpbmRLZXkiLCJrZXkiLCJrZXlWYWx1ZSIsIm5vZGVCeUtleVZhbHVlIiwiTWFwIiwia2V5VmFsdWVzIiwiY2FsbCIsImhhcyIsInNldCIsImdldCIsImRlbGV0ZSIsImFycmF5bGlrZSIsImNvbnN0cnVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJjaGlsZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJ4aHRtbCIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJuYW1lIiwicHJlZml4IiwiaW5kZXhPZiIsIm5hbWVzcGFjZXMiLCJoYXNPd25Qcm9wZXJ0eSIsInNwYWNlIiwibG9jYWwiLCJhdHRyUmVtb3ZlIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0clJlbW92ZU5TIiwiZnVsbG5hbWUiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImF0dHJDb25zdGFudCIsInNldEF0dHJpYnV0ZSIsImF0dHJDb25zdGFudE5TIiwic2V0QXR0cmlidXRlTlMiLCJhdHRyRnVuY3Rpb24iLCJ2IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJhdHRyRnVuY3Rpb25OUyIsImRlZmF1bHRWaWV3IiwiZG9jdW1lbnQiLCJzdHlsZVJlbW92ZSIsInN0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJzdHlsZUNvbnN0YW50IiwicHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZVZhbHVlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJwcm9wZXJ0eVJlbW92ZSIsInByb3BlcnR5Q29uc3RhbnQiLCJwcm9wZXJ0eUZ1bmN0aW9uIiwiY2xhc3NBcnJheSIsInN0cmluZyIsInRyaW0iLCJzcGxpdCIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlZEFkZCIsIm5hbWVzIiwibGlzdCIsImFkZCIsImNsYXNzZWRSZW1vdmUiLCJyZW1vdmUiLCJjbGFzc2VkVHJ1ZSIsImNsYXNzZWRGYWxzZSIsImNsYXNzZWRGdW5jdGlvbiIsInRleHRSZW1vdmUiLCJ0ZXh0Q29udGVudCIsInRleHRDb25zdGFudCIsInRleHRGdW5jdGlvbiIsImh0bWxSZW1vdmUiLCJpbm5lckhUTUwiLCJodG1sQ29uc3RhbnQiLCJodG1sRnVuY3Rpb24iLCJyYWlzZSIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImxvd2VyIiwicHJldmlvdXNTaWJsaW5nIiwiZmlyc3RDaGlsZCIsImNyZWF0b3JJbmhlcml0IiwidXJpIiwiZG9jdW1lbnRFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0b3JGaXhlZCIsIm5hbWVzcGFjZSIsImNvbnN0YW50TnVsbCIsInJlbW92ZUNoaWxkIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsImNsb25lIiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsInBhcnNlVHlwZW5hbWVzIiwidHlwZW5hbWVzIiwidCIsInR5cGUiLCJvblJlbW92ZSIsInR5cGVuYW1lIiwib24iLCJfX29uIiwibyIsImoiLCJtIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyIiwib3B0aW9ucyIsIm9uQWRkIiwiZXZlbnQiLCJjb250ZXh0TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicHVzaCIsImRpc3BhdGNoRXZlbnQiLCJwYXJhbXMiLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJkaXNwYXRjaENvbnN0YW50IiwiZGlzcGF0Y2hGdW5jdGlvbiIsImpvaW4iLCJzcGxpY2UiLCJjb250YWlucyIsInJvb3QiLCJTZWxlY3Rpb24iLCJncm91cHMiLCJwYXJlbnRzIiwiX2dyb3VwcyIsIl9wYXJlbnRzIiwic2VsZWN0aW9uIiwic2VsZWN0Iiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwic2VsZWN0QWxsIiwiYXJyYXlBbGwiLCJzZWxlY3RvckFsbCIsInNlbGVjdENoaWxkIiwibWF0Y2giLCJjaGlsZEZpbmQiLCJzZWxlY3RDaGlsZHJlbiIsImNoaWxkcmVuRmlsdGVyIiwibWF0Y2hlciIsImJpbmQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJleGl0R3JvdXAiLCJwcmV2aW91cyIsImkwIiwiaTEiLCJfZW50ZXIiLCJfZXhpdCIsInNwYXJzZSIsIm9uZW50ZXIiLCJvbnVwZGF0ZSIsIm9uZXhpdCIsImFwcGVuZCIsIm1lcmdlIiwib3JkZXIiLCJjb250ZXh0IiwiZ3JvdXBzMCIsImdyb3VwczEiLCJtMCIsIm0xIiwibWVyZ2VzIiwiZ3JvdXAwIiwiZ3JvdXAxIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJzb3J0IiwiY29tcGFyZSIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsImNhbGxiYWNrIiwibm9kZXMiLCJzaXplIiwiZWFjaCIsImF0dHIiLCJnZXRBdHRyaWJ1dGVOUyIsInByb3BlcnR5IiwiY2xhc3NlZCIsInRleHQiLCJodG1sIiwiY3JlYXRlIiwiY3JlYXRvciIsImluc2VydCIsImJlZm9yZSIsImRlZXAiLCJkaXNwYXRjaCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwibm9vcCIsIl8iLCJ0ZXN0IiwiRXJyb3IiLCJEaXNwYXRjaCIsInR5cGVzIiwiYyIsImNvbmNhdCIsIlQiLCJjb3B5IiwidGhhdCIsImFyZ3MiLCJ0YXNrSGVhZCIsInRhc2tUYWlsIiwidGltZW91dCIsImludGVydmFsIiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwibm93IiwiRGF0ZSIsInNldEZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsImNsZWFyTm93IiwiVGltZXIiLCJfY2FsbCIsIl90aW1lIiwidGltZXIiLCJkZWxheSIsInRpbWUiLCJyZXN0YXJ0Iiwid2FrZSIsImUiLCJ0aW1lckZsdXNoIiwidDAiLCJ0MiIsInQxIiwiSW5maW5pdHkiLCJzbGVlcCIsIm5hcCIsInBva2UiLCJjbGVhclRpbWVvdXQiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJlbGFwc2VkIiwiVHlwZUVycm9yIiwiZW1wdHlPbiIsImVtcHR5VHdlZW4iLCJpZCIsInRpbWluZyIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsInNlbGYiLCJ0d2VlbiIsInN0YXRlIiwidGljayIsImR1cmF0aW9uIiwiZWFzZSIsImluaXQiLCJzY2hlZHVsZSIsInN2Z05vZGUiLCJkZWdyZWVzIiwiUEkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiYXRhbjIiLCJhdGFuIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm0iLCJwYXJzZSIsInB4Q29tbWEiLCJweFBhcmVuIiwiZGVnUGFyZW4iLCJwb3AiLCJzIiwicSIsInhhIiwieWEiLCJ4YiIsInliIiwidHJhbnNsYXRlIiwic2NhbGUiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyIsIkRPTU1hdHJpeCIsIldlYktpdENTU01hdHJpeCIsImlzSWRlbnRpdHkiLCJkZWNvbXBvc2UiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyIsInRyYW5zZm9ybSIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsIm1hdHJpeCIsInR3ZWVuUmVtb3ZlIiwidHdlZW4wIiwidHdlZW4xIiwidHdlZW5GdW5jdGlvbiIsInR3ZWVuVmFsdWUiLCJ0cmFuc2l0aW9uIiwiX2lkIiwiZmFjdG9yeSIsImV4dGVuZCIsImRlZmluaXRpb24iLCJDb2xvciIsImRhcmtlciIsImJyaWdodGVyIiwicmVJIiwicmVOIiwicmVQIiwicmVIZXgiLCJyZVJnYkludGVnZXIiLCJSZWdFeHAiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGFuIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3JfZm9ybWF0SGV4IiwicmdiIiwiZm9ybWF0SGV4IiwiY29sb3JfZm9ybWF0UmdiIiwiZm9ybWF0UmdiIiwiY29sb3IiLCJmb3JtYXQiLCJsIiwidG9Mb3dlckNhc2UiLCJleGVjIiwicGFyc2VJbnQiLCJyZ2JuIiwiUmdiIiwicmdiYSIsImhzbGEiLCJyIiwiZyIsInJnYkNvbnZlcnQiLCJvcGFjaXR5IiwicmdiX2Zvcm1hdEhleCIsImhleCIsInJnYl9mb3JtYXRSZ2IiLCJjbGFtcGEiLCJjbGFtcGkiLCJpc05hTiIsInRvU3RyaW5nIiwiaCIsIkhzbCIsImhzbENvbnZlcnQiLCJjbGFtcGgiLCJjbGFtcHQiLCJoc2wycmdiIiwibTIiLCJiYXNpcyIsInYwIiwidjEiLCJ2MiIsInYzIiwidDMiLCJjaGFubmVscyIsImFzc2lnbiIsImRpc3BsYXlhYmxlIiwiZm9ybWF0SGV4OCIsImZvcm1hdEhzbCIsImsiLCJub2dhbW1hIiwibGluZWFyIiwicmdiR2FtbWEiLCJ5IiwiZXhwb25lbnRpYWwiLCJnYW1tYSIsImVuZCIsInJnYlNwbGluZSIsInNwbGluZSIsImNvbG9ycyIsInJlQSIsInJlQiIsInNvdXJjZSIsImFtIiwiYm0iLCJicyIsImJpIiwibGFzdEluZGV4Iiwib25lIiwiaW50ZXJwb2xhdGUiLCJ2YWx1ZTEiLCJzdHJpbmcwMCIsImludGVycG9sYXRlMCIsInN0cmluZzEiLCJzdHJpbmcwIiwic3RyaW5nMTAiLCJhdHRySW50ZXJwb2xhdGUiLCJhdHRySW50ZXJwb2xhdGVOUyIsImF0dHJUd2Vlbk5TIiwiX3ZhbHVlIiwiYXR0clR3ZWVuIiwiZGVsYXlGdW5jdGlvbiIsImRlbGF5Q29uc3RhbnQiLCJkdXJhdGlvbkZ1bmN0aW9uIiwiZHVyYXRpb25Db25zdGFudCIsImVhc2VDb25zdGFudCIsIm9uRnVuY3Rpb24iLCJvbjAiLCJvbjEiLCJzaXQiLCJldmVyeSIsInN0eWxlSW50ZXJwb2xhdGUiLCJzdHlsZVR3ZWVuIiwidGV4dEludGVycG9sYXRlIiwidGV4dFR3ZWVuIiwiVHJhbnNpdGlvbiIsIl9uYW1lIiwibmV3SWQiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsInN0eWxlTnVsbCIsImxpc3RlbmVyMCIsInN0eWxlTWF5YmVSZW1vdmUiLCJyZW1vdmVGdW5jdGlvbiIsImVhc2VWYXJ5aW5nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjYW5jZWwiLCJpbnRlcnJ1cHQiLCJkZWZhdWx0VGltaW5nIiwiYWN0aXZlIiwiYWJzIiwiZ2VuZXJpY0FycmF5IiwibmIiLCJuYSIsInNldFRpbWUiLCJkYXRlIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJEYXRhVmlldyIsInZhbHVlT2YiLCJvYmplY3QiLCJ1bml0Iiwibm9ybWFsaXplIiwiYmltYXAiLCJkb21haW4iLCJyYW5nZSIsImQwIiwiZDEiLCJwb2x5bWFwIiwiYmlzZWN0IiwidGFyZ2V0IiwiY2xhbXAiLCJ1bmtub3duIiwiY29udGludW91cyIsInVudHJhbnNmb3JtIiwicGllY2V3aXNlIiwib3V0cHV0IiwiaW5wdXQiLCJyZXNjYWxlIiwiaW52ZXJ0IiwicmFuZ2VSb3VuZCIsInUiLCJ0cmFuc2Zvcm1lciIsImluaXRSYW5nZSIsInByZWZpeEV4cG9uZW50IiwicmUiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwic3ltYm9sIiwid2lkdGgiLCJjb21tYSIsInByZWNpc2lvbiIsImZvcm1hdERlY2ltYWxQYXJ0cyIsInAiLCJ0b0V4cG9uZW50aWFsIiwiY29lZmZpY2llbnQiLCJleHBvbmVudCIsInRvRml4ZWQiLCJ0b0xvY2FsZVN0cmluZyIsInJlcGxhY2UiLCJ0b1ByZWNpc2lvbiIsImZvcm1hdFJvdW5kZWQiLCJ0b1VwcGVyQ2FzZSIsImZvcm1hdFByZWZpeCIsInByZWZpeGVzIiwibGluZWFyaXNoIiwidGlja0Zvcm1hdCIsInN0ZXAwIiwic3RlcDEiLCJ0aWNrU3RlcCIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJuaWNlIiwicHJlc3RlcCIsIm1heEl0ZXIiLCJsb2NhbGUiLCJncm91cGluZyIsInRob3VzYW5kcyIsIk51bWJlciIsInN1YnN0cmluZyIsImN1cnJlbmN5UHJlZml4IiwiY3VycmVuY3kiLCJjdXJyZW5jeVN1ZmZpeCIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwiU3RyaW5nIiwicGVyY2VudCIsIm1pbnVzIiwibmFuIiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZXMiLCJzdWZmaXgiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsIm91dCIsImZvcm1hdFRyaW0iLCJjaGFyQ29kZUF0IiwicGFkZGluZyIsInBvaW50IiwiYXBwbHlYIiwiYXBwbHlZIiwibG9jYXRpb24iLCJpbnZlcnRYIiwiaW52ZXJ0WSIsInJlc2NhbGVYIiwicmVzY2FsZVkiLCJtYXBDb3VudHJ5Q29kZSIsImNvZGUiLCJvblBhbGV0dGVDaGFuZ2UiLCJyZWRyYXdDaGFydCIsIm9uTW9kZUNoYW5nZSIsIm9uU2VsZWN0RGF0YSIsInNlbGVjdERhdGFJbnB1dCIsImNsaWNrIiwib25EYXRhQ2hhbmdlIiwiZmlsZXMiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzVGV4dCIsIm9ubG9hZCIsIm9uRGF0YUxvYWRlZCIsInJvd3MiLCJyZXN1bHQiLCJyb3ciLCJwYXJzZUZsb2F0Iiwib25Eb3dubG9hZENoYXJ0IiwiQmxvYiIsIm1hcFN2ZyIsIm91dGVySFRNTCIsImRvd25sb2FkQ2hhcnRMaW5rIiwiaHJlZiIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInBhbGV0dGUiLCJwYWxldHRlU2VsZWN0IiwibW9kZSIsIm1vZGVTZWxlY3QiLCJCaW5zIiwiYmlucyIsInRocmVzaG9sZCIsImhpc3RvZ3JhbSIsInh6IiwieDAiLCJ4MSIsInR6IiwidG4iLCJzaGlmdCIsImJpbiIsInRocmVzaG9sZHMiLCJmb3JFYWNoIiwiaXRlbSIsImVsZW1lbnQiLCJsZWdlbmREYXRhIiwibGVnZW5kIiwiQ09ORklHIiwiQ29udGlub3VzIiwiaW5pdEVsZW1lbnRzIiwic2VsZWN0RGF0YUJ1dHRvbiIsImRvd25sb2FkQ2hhcnRCdXR0b24iLCJpbml0TGlzdGVuZXJzIiwicGFnZSIsIlBhZ2UiXSwibWFwcGluZ3MiOiJ5QkFBWUEsR0FBWixTQUFZQSxHQUNWLFlBQ0EsY0FDQSxrQkFDQSwwQkFDQSxrQkFDQSxjQUNBLHdCQUNBLGNBQ0EsY0FDQSxnQkFDQSwwQkFDQSxjQUNBLGtCQUNBLGdCQUNBLGtCQUNBLDBCQUNBLGdCQUNBLGNBQ0Esc0JBbkJGLENBQVlBLE1BQU8sS0FzQlosSUFzQktDLEVBZ0NBQyxFQXREQ0MsSUFBUSxNQUNsQkgsRUFBUUksS0FBTSxDQUFDLFVBQVcsV0FDM0IsRUFBQ0osRUFBUUssTUFBTyxDQUFDLFVBQVcsV0FDNUIsRUFBQ0wsRUFBUU0sUUFBUyxDQUFDLFVBQVcsV0FDOUIsRUFBQ04sRUFBUU8sWUFBYSxDQUFDLFVBQVcsV0FDbEMsRUFBQ1AsRUFBUVEsUUFBUyxDQUFDLFVBQVcsV0FDOUIsRUFBQ1IsRUFBUVMsTUFBTyxDQUFDLFVBQVcsV0FDNUIsRUFBQ1QsRUFBUVUsV0FBWSxDQUFDLFVBQVcsV0FDakMsRUFBQ1YsRUFB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QUVFLEVBQUssUUFDdEIweUIsRUFBTyxHQUF1QjV5QixHQUNwQixHQUFVLFdBQUk0eUIsSUFDdEJwb0IsTUFBTSxPQUFRcVAsRUFBTTNaLE9BR2YsR0FBVTh6QixHQUFRdmpCLE9BQU8saUJBRWpDSSxVQUFVLEtBQUszRSxTSnlDbEIsQ0FBb0IsRUFBSzhuQixPQUFRLEVBQUt6c0IsS0FBTStzQixLQUloRCxLQUFBdUIsYUFBZSxXQUNiLEVBQUs1QyxnQkFBa0Izb0IsU0FBU3pFLGNBQWMsc0JBQzlDLEVBQUtpd0IsaUJBQW1CeHJCLFNBQVN6RSxjQUFjLHVCQUMvQyxFQUFLa3dCLG9CQUFzQnpyQixTQUFTekUsY0FBYywwQkFDbEQsRUFBS3F1QixrQkFBb0I1cEIsU0FBU3pFLGNBQWMsd0JBQ2hELEVBQUswdUIsY0FBZ0JqcUIsU0FBU3pFLGNBQWMsbUJBQzVDLEVBQUs0dUIsV0FBYW5xQixTQUFTekUsY0FBYyxnQkFDekMsRUFBS211QixPQUFTMXBCLFNBQVN6RSxjQUFjLFlBR3ZDLEtBQUFtd0IsY0FBZ0IsV0FDZCxFQUFLRixpQkFBaUI1bUIsaUJBQWlCLFFBQVMsRUFBSzhqQixjQUNyRCxFQUFLQyxnQkFBZ0IvakIsaUJBQWlCLFNBQVUsRUFBS2lrQixjQUNyRCxFQUFLNEMsb0JBQW9CN21CLGlCQUFpQixRQUFTLEVBQUs0a0IsaUJBQ3hELEVBQUtTLGNBQWNybEIsaUJBQWlCLFFBQVMsRUFBSzJqQixpQkFDbEQsRUFBSzRCLFdBQVd2bEIsaUJBQWlCLFFBQVMsRUFBSzZqQixnQkFXbkR6b0IsU0FBUzRFLGlCQUFpQixvQkFBb0IsV0FQakMsSUFDTCttQixLQUFPLElBQUlDLElBQ1pMLGVBQ0xJLEVBQUtELGdCQUNMQyxFQUFLbkQsa0IiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gUGFsZXR0ZSB7XG4gIFJlZCA9ICdyZWQnLFxuICBQaW5rID0gJ3BpbmsnLFxuICBQdXJwbGUgPSAncHVycGxlJyxcbiAgRGVlcFB1cnBsZSA9ICdkZWVwUHVycGxlJyxcbiAgSW5kaWdvID0gJ2luZGlnbycsXG4gIEJsdWUgPSAnYmx1ZScsXG4gIExpZ2h0Qmx1ZSA9ICdsaWdodEJsdWUnLFxuICBDeWFuID0gJ2N5YW4nLFxuICBUZWFsID0gJ3RlYWwnLFxuICBHcmVlbiA9ICdncmVlbicsXG4gIExpZ2h0R3JlZW4gPSAnbGlnaHRHcmVlbicsXG4gIExpbWUgPSAnbGltZScsXG4gIFllbGxvdyA9ICd5ZWxsb3cnLFxuICBBbWJlciA9ICdhbWJlcicsXG4gIE9yYW5nZSA9ICdvcmFuZ2UnLFxuICBEZWVwT3JhbmdlID0gJ2RlZXBPcmFuZ2UnLFxuICBCcm93biA9ICdicm93bicsXG4gIEdyZXkgPSAnZ3JleScsXG4gIEJsdWVHcmV5ID0gJ2JsdWVHcmV5Jyxcbn1cblxuZXhwb3J0IGNvbnN0IFBBTEVUVEVTID0ge1xuICBbUGFsZXR0ZS5SZWRdOiBbJyNmZmViZWUnLCAnI2I3MWMxYyddLFxuICBbUGFsZXR0ZS5QaW5rXTogWycjZmNlNGVjJywgJyM4ODBlNGYnXSxcbiAgW1BhbGV0dGUuUHVycGxlXTogWycjZjNlNWY1JywgJyM0YTE0OGMnXSxcbiAgW1BhbGV0dGUuRGVlcFB1cnBsZV06IFsnI2VkZTdmNicsICcjMzExYjkyJ10sXG4gIFtQYWxldHRlLkluZGlnb106IFsnI2U4ZWFmNicsICcjMWEyMzdlJ10sXG4gIFtQYWxldHRlLkJsdWVdOiBbJyNlM2YyZmQnLCAnIzBkNDdhMSddLFxuICBbUGFsZXR0ZS5MaWdodEJsdWVdOiBbJyNlMWY1ZmUnLCAnIzAxNTc5YiddLFxuICBbUGFsZXR0ZS5DeWFuXTogWycjZTBmN2ZhJywgJyMwMDYwNjQnXSxcbiAgW1BhbGV0dGUuVGVhbF06IFsnI2UwZjJmMScsICcjMDA0ZDQwJ10sXG4gIFtQYWxldHRlLkdyZWVuXTogWycjZThmNWU5JywgJyMxYjVlMjAnXSxcbiAgW1BhbGV0dGUuTGlnaHRHcmVlbl06IFsnI2YxZjhlOScsICcjMzM2OTFlJ10sXG4gIFtQYWxldHRlLkxpbWVdOiBbJyNmOWZiZTcnLCAnIzgyNzcxNyddLFxuICBbUGFsZXR0ZS5ZZWxsb3ddOiBbJyNmZmZkZTcnLCAnI2Y1N2YxNyddLFxuICBbUGFsZXR0ZS5BbWJlcl06IFsnI2ZmZjhlMScsICcjZmY2ZjAwJ10sXG4gIFtQYWxldHRlLk9yYW5nZV06IFsnI2ZmZjNlMCcsICcjZTY1MTAwJ10sXG4gIFtQYWxldHRlLkRlZXBPcmFuZ2VdOiBbJyNmYmU5ZTcnLCAnI2JmMzYwYyddLFxuICBbUGFsZXR0ZS5Ccm93bl06IFsnI2VmZWJlOScsICcjM2UyNzIzJ10sXG4gIFtQYWxldHRlLkdyZXldOiBbJyNmYWZhZmEnLCAnIzIxMjEyMSddLFxuICBbUGFsZXR0ZS5CbHVlR3JleV06IFsnI2VjZWZmMScsICcjMjYzMjM4J10sXG59O1xuXG5leHBvcnQgZW51bSBDb3VudHJ5IHtcbiAgQkUgPSAnQkUnLFxuICBCRyA9ICdCRycsXG4gIENaID0gJ0NaJyxcbiAgREsgPSAnREsnLFxuICBERSA9ICdERScsXG4gIEVFID0gJ0VFJyxcbiAgSUUgPSAnSUUnLFxuICBFTCA9ICdFTCcsXG4gIEVTID0gJ0VTJyxcbiAgRlIgPSAnRlInLFxuICBIUiA9ICdIUicsXG4gIElUID0gJ0lUJyxcbiAgQ1kgPSAnQ1knLFxuICBMViA9ICdMVicsXG4gIExUID0gJ0xUJyxcbiAgTFUgPSAnTFUnLFxuICBIVSA9ICdIVScsXG4gIE1UID0gJ01UJyxcbiAgTkwgPSAnTkwnLFxuICBBVCA9ICdBVCcsXG4gIFBMID0gJ1BMJyxcbiAgUFQgPSAnUFQnLFxuICBSTyA9ICdSTycsXG4gIFNJID0gJ1NJJyxcbiAgU0sgPSAnU0snLFxuICBGSSA9ICdGSScsXG4gIFNFID0gJ1NFJyxcbn1cblxuZXhwb3J0IGNvbnN0IEFMTF9DT1VOVFJJRVMgPSBPYmplY3Qua2V5cyhDb3VudHJ5KSBhcyBDb3VudHJ5W107XG5cbmV4cG9ydCBlbnVtIE1PREUge1xuICBDb250aW5vdXMgPSAnY29udGlub3VzJyxcbiAgQmlucyA9ICdiaW5zJyxcbn1cblxuZXhwb3J0IHR5cGUgRGF0YUl0ZW0gPSB7XG4gIGNvdW50cnk6IENvdW50cnk7XG4gIHZhbHVlOiBudW1iZXI7XG59O1xuIiwiaW1wb3J0IHsgRGF0YUl0ZW0sIENvdW50cnkgfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbmV4cG9ydCBjb25zdCBDT0xPUlMgPSB7XHJcbiAgTm9EYXRhOiAnI2VlZWVlZScsXHJcbiAgQm9yZGVyczogJyNhYWFhYWEnLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFNBTVBMRV9EQVRBOiBEYXRhSXRlbVtdID0gW1xyXG4gIHtcclxuICAgIGNvdW50cnk6IENvdW50cnkuQkUsXHJcbiAgICB2YWx1ZTogNS40LFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY291bnRyeTogQ291bnRyeS5CRyxcclxuICAgIHZhbHVlOiA0LjIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb3VudHJ5OiBDb3VudHJ5LkNaLFxyXG4gICAgdmFsdWU6IDIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb3VudHJ5OiBDb3VudHJ5LkRLLFxyXG4gICAgdmFsdWU6IDUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb3VudHJ5OiBDb3VudHJ5LkRFLFxyXG4gICAgdmFsdWU6IDMuMixcclxuICB9LFxyXG4gIHtcclxuICAgIGNvdW50cnk6IENvdW50cnkuRUUsXHJcbiAgICB2YWx1ZTogNC40LFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY291bnRyeTogQ291bnRyeS5JRSxcclxuICAgIHZhbHVlOiA1LFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY291bnRyeTogQ291bnRyeS5FTCxcclxuICAgIHZhbHVlOiAxNy4zLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY291bnRyeTogQ291bnRyeS5FUyxcclxuICAgIHZhbHVlOiAxNC4xLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY291bnRyeTogQ291bnRyeS5GUixcclxuICAgIHZhbHVlOiA4LjUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb3VudHJ5OiBDb3VudHJ5LkhSLFxyXG4gICAgdmFsdWU6IDYuNixcclxuICB9LFxyXG4gIHtcclxuICAgIGNvdW50cnk6IENvdW50cnkuSVQsXHJcbiAgICB2YWx1ZTogMTAsXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb3VudHJ5OiBDb3VudHJ5LkNZLFxyXG4gICAgdmFsdWU6IDcuMSxcclxuICB9LFxyXG4gIHtcclxuICAgIGNvdW50cnk6IENvdW50cnkuTFYsXHJcbiAgICB2YWx1ZTogNi4zLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY291bnRyeTogQ291bnRyeS5MVCxcclxuICAgIHZhbHVlOiA2LjMsXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb3VudHJ5OiBDb3VudHJ5LkxVLFxyXG4gICAgdmFsdWU6IDUuNixcclxuICB9LFxyXG4gIHtcclxuICAgIGNvdW50cnk6IENvdW50cnkuSFUsXHJcbiAgICB2YWx1ZTogMy40LFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY291bnRyeTogQ291bnRyeS5NVCxcclxuICAgIHZhbHVlOiAzLjQsXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb3VudHJ5OiBDb3VudHJ5Lk5MLFxyXG4gICAgdmFsdWU6IDMuNCxcclxuICB9LFxyXG4gIHtcclxuICAgIGNvdW50cnk6IENvdW50cnkuQVQsXHJcbiAgICB2YWx1ZTogNC41LFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY291bnRyeTogQ291bnRyeS5QTCxcclxuICAgIHZhbHVlOiAzLjMsXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb3VudHJ5OiBDb3VudHJ5LlBULFxyXG4gICAgdmFsdWU6IDYuNSxcclxuICB9LFxyXG4gIHtcclxuICAgIGNvdW50cnk6IENvdW50cnkuUk8sXHJcbiAgICB2YWx1ZTogMy45LFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY291bnRyeTogQ291bnRyeS5TSSxcclxuICAgIHZhbHVlOiA0LjUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBjb3VudHJ5OiBDb3VudHJ5LlNLLFxyXG4gICAgdmFsdWU6IDUuOCxcclxuICB9LFxyXG4gIHtcclxuICAgIGNvdW50cnk6IENvdW50cnkuRkksXHJcbiAgICB2YWx1ZTogNi43LFxyXG4gIH0sXHJcbiAge1xyXG4gICAgY291bnRyeTogQ291bnRyeS5TRSxcclxuICAgIHZhbHVlOiA2LjgsXHJcbiAgfSxcclxuXTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0ZW50KHZhbHVlcywgdmFsdWVvZikge1xuICBsZXQgbWluO1xuICBsZXQgbWF4O1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChtaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh2YWx1ZSA+PSB2YWx1ZSkgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG1pbiA+IHZhbHVlKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpICE9IG51bGwpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID49IHZhbHVlKSBtaW4gPSBtYXggPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIGlmIChtYXggPCB2YWx1ZSkgbWF4ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIFttaW4sIG1heF07XG59XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcbmV4cG9ydCB2YXIgbWFwID0gYXJyYXkubWFwO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT0gbnVsbCB8fCBiID09IG51bGwgPyBOYU4gOiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlc2NlbmRpbmcoYSwgYikge1xuICByZXR1cm4gYSA9PSBudWxsIHx8IGIgPT0gbnVsbCA/IE5hTlxuICAgIDogYiA8IGEgPyAtMVxuICAgIDogYiA+IGEgPyAxXG4gICAgOiBiID49IGEgPyAwXG4gICAgOiBOYU47XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuaW1wb3J0IGRlc2NlbmRpbmcgZnJvbSBcIi4vZGVzY2VuZGluZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaXNlY3RvcihmKSB7XG4gIGxldCBjb21wYXJlMSwgY29tcGFyZTIsIGRlbHRhO1xuXG4gIC8vIElmIGFuIGFjY2Vzc29yIGlzIHNwZWNpZmllZCwgcHJvbW90ZSBpdCB0byBhIGNvbXBhcmF0b3IuIEluIHRoaXMgY2FzZSB3ZVxuICAvLyBjYW4gdGVzdCB3aGV0aGVyIHRoZSBzZWFyY2ggdmFsdWUgaXMgKHNlbGYtKSBjb21wYXJhYmxlLiBXZSBjYW7igJl0IGRvIHRoaXNcbiAgLy8gZm9yIGEgY29tcGFyYXRvciAoZXhjZXB0IGZvciBzcGVjaWZpYywga25vd24gY29tcGFyYXRvcnMpIGJlY2F1c2Ugd2UgY2Fu4oCZdFxuICAvLyB0ZWxsIGlmIHRoZSBjb21wYXJhdG9yIGlzIHN5bW1ldHJpYywgYW5kIGFuIGFzeW1tZXRyaWMgY29tcGFyYXRvciBjYW7igJl0IGJlXG4gIC8vIHVzZWQgdG8gdGVzdCB3aGV0aGVyIGEgc2luZ2xlIHZhbHVlIGlzIGNvbXBhcmFibGUuXG4gIGlmIChmLmxlbmd0aCAhPT0gMikge1xuICAgIGNvbXBhcmUxID0gYXNjZW5kaW5nO1xuICAgIGNvbXBhcmUyID0gKGQsIHgpID0+IGFzY2VuZGluZyhmKGQpLCB4KTtcbiAgICBkZWx0YSA9IChkLCB4KSA9PiBmKGQpIC0geDtcbiAgfSBlbHNlIHtcbiAgICBjb21wYXJlMSA9IGYgPT09IGFzY2VuZGluZyB8fCBmID09PSBkZXNjZW5kaW5nID8gZiA6IHplcm87XG4gICAgY29tcGFyZTIgPSBmO1xuICAgIGRlbHRhID0gZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlZnQoYSwgeCwgbG8gPSAwLCBoaSA9IGEubGVuZ3RoKSB7XG4gICAgaWYgKGxvIDwgaGkpIHtcbiAgICAgIGlmIChjb21wYXJlMSh4LCB4KSAhPT0gMCkgcmV0dXJuIGhpO1xuICAgICAgZG8ge1xuICAgICAgICBjb25zdCBtaWQgPSAobG8gKyBoaSkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlMihhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfSB3aGlsZSAobG8gPCBoaSk7XG4gICAgfVxuICAgIHJldHVybiBsbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJpZ2h0KGEsIHgsIGxvID0gMCwgaGkgPSBhLmxlbmd0aCkge1xuICAgIGlmIChsbyA8IGhpKSB7XG4gICAgICBpZiAoY29tcGFyZTEoeCwgeCkgIT09IDApIHJldHVybiBoaTtcbiAgICAgIGRvIHtcbiAgICAgICAgY29uc3QgbWlkID0gKGxvICsgaGkpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZTIoYVttaWRdLCB4KSA8PSAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9IHdoaWxlIChsbyA8IGhpKTtcbiAgICB9XG4gICAgcmV0dXJuIGxvO1xuICB9XG5cbiAgZnVuY3Rpb24gY2VudGVyKGEsIHgsIGxvID0gMCwgaGkgPSBhLmxlbmd0aCkge1xuICAgIGNvbnN0IGkgPSBsZWZ0KGEsIHgsIGxvLCBoaSAtIDEpO1xuICAgIHJldHVybiBpID4gbG8gJiYgZGVsdGEoYVtpIC0gMV0sIHgpID4gLWRlbHRhKGFbaV0sIHgpID8gaSAtIDEgOiBpO1xuICB9XG5cbiAgcmV0dXJuIHtsZWZ0LCBjZW50ZXIsIHJpZ2h0fTtcbn1cblxuZnVuY3Rpb24gemVybygpIHtcbiAgcmV0dXJuIDA7XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuXG5jb25zdCBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IGNvbnN0IGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IGNvbnN0IGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBjb25zdCBiaXNlY3RDZW50ZXIgPSBiaXNlY3RvcihudW1iZXIpLmNlbnRlcjtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbnVtYmVyKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uKiBudW1iZXJzKHZhbHVlcywgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25zdGFudCh4KSB7XG4gIHJldHVybiAoKSA9PiB4O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICByZXR1cm4geDtcbn1cbiIsInZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGlja3Moc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgbGV0IHIwID0gTWF0aC5yb3VuZChzdGFydCAvIHN0ZXApLCByMSA9IE1hdGgucm91bmQoc3RvcCAvIHN0ZXApO1xuICAgIGlmIChyMCAqIHN0ZXAgPCBzdGFydCkgKytyMDtcbiAgICBpZiAocjEgKiBzdGVwID4gc3RvcCkgLS1yMTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gcjEgLSByMCArIDEpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChyMCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGVwID0gLXN0ZXA7XG4gICAgbGV0IHIwID0gTWF0aC5yb3VuZChzdGFydCAqIHN0ZXApLCByMSA9IE1hdGgucm91bmQoc3RvcCAqIHN0ZXApO1xuICAgIGlmIChyMCAvIHN0ZXAgPCBzdGFydCkgKytyMDtcbiAgICBpZiAocjEgLyBzdGVwID4gc3RvcCkgLS1yMTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gcjEgLSByMCArIDEpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChyMCArIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImltcG9ydCBjb3VudCBmcm9tIFwiLi4vY291bnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyZXNob2xkU3R1cmdlcyh2YWx1ZXMpIHtcbiAgcmV0dXJuIE1hdGguY2VpbChNYXRoLmxvZyhjb3VudCh2YWx1ZXMpKSAvIE1hdGguTE4yKSArIDE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb3VudCh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgKHZhbHVlID0gK3ZhbHVlKSA+PSB2YWx1ZSkge1xuICAgICAgICArK2NvdW50O1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlLCArK2luZGV4LCB2YWx1ZXMpKSAhPSBudWxsICYmICh2YWx1ZSA9ICt2YWx1ZSkgPj0gdmFsdWUpIHtcbiAgICAgICAgKytjb3VudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvdW50O1xufVxuIiwiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiLy8gR2l2ZW4gc29tZXRoaW5nIGFycmF5IGxpa2UgKG9yIG51bGwpLCByZXR1cm5zIHNvbWV0aGluZyB0aGF0IGlzIHN0cmljdGx5IGFuXG4vLyBhcnJheS4gVGhpcyBpcyB1c2VkIHRvIGVuc3VyZSB0aGF0IGFycmF5LWxpa2Ugb2JqZWN0cyBwYXNzZWQgdG8gZDMuc2VsZWN0QWxsXG4vLyBvciBzZWxlY3Rpb24uc2VsZWN0QWxsIGFyZSBjb252ZXJ0ZWQgaW50byBwcm9wZXIgYXJyYXlzIHdoZW4gY3JlYXRpbmcgYVxuLy8gc2VsZWN0aW9uOyB3ZSBkb27igJl0IGV2ZXIgd2FudCB0byBjcmVhdGUgYSBzZWxlY3Rpb24gYmFja2VkIGJ5IGEgbGl2ZVxuLy8gSFRNTENvbGxlY3Rpb24gb3IgTm9kZUxpc3QuIEhvd2V2ZXIsIG5vdGUgdGhhdCBzZWxlY3Rpb24uc2VsZWN0QWxsIHdpbGwgdXNlIGFcbi8vIHN0YXRpYyBOb2RlTGlzdCBhcyBhIGdyb3VwLCBzaW5jZSBpdCBzYWZlbHkgZGVyaXZlZCBmcm9tIHF1ZXJ5U2VsZWN0b3JBbGwuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcnJheSh4KSB7XG4gIHJldHVybiB4ID09IG51bGwgPyBbXSA6IEFycmF5LmlzQXJyYXkoeCkgPyB4IDogQXJyYXkuZnJvbSh4KTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkTWF0Y2hlcihzZWxlY3Rvcikge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiBub2RlLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuXG4iLCJpbXBvcnQge2NoaWxkTWF0Y2hlcn0gZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxudmFyIGZpbmQgPSBBcnJheS5wcm90b3R5cGUuZmluZDtcblxuZnVuY3Rpb24gY2hpbGRGaW5kKG1hdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmluZC5jYWxsKHRoaXMuY2hpbGRyZW4sIG1hdGNoKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2hpbGRGaXJzdCgpIHtcbiAgcmV0dXJuIHRoaXMuZmlyc3RFbGVtZW50Q2hpbGQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChtYXRjaCA9PSBudWxsID8gY2hpbGRGaXJzdFxuICAgICAgOiBjaGlsZEZpbmQodHlwZW9mIG1hdGNoID09PSBcImZ1bmN0aW9uXCIgPyBtYXRjaCA6IGNoaWxkTWF0Y2hlcihtYXRjaCkpKTtcbn1cbiIsImltcG9ydCB7Y2hpbGRNYXRjaGVyfSBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG52YXIgZmlsdGVyID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcjtcblxuZnVuY3Rpb24gY2hpbGRyZW4oKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlbkZpbHRlcihtYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMuY2hpbGRyZW4sIG1hdGNoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0QWxsKG1hdGNoID09IG51bGwgPyBjaGlsZHJlblxuICAgICAgOiBjaGlsZHJlbkZpbHRlcih0eXBlb2YgbWF0Y2ggPT09IFwiZnVuY3Rpb25cIiA/IG1hdGNoIDogY2hpbGRNYXRjaGVyKG1hdGNoKSkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZS5qc1wiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXIuanNcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnQuanNcIjtcblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSBuZXcgTWFwLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxuICAgICAga2V5VmFsdWU7XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIG5vZGUuXG4gIC8vIElmIG11bHRpcGxlIG5vZGVzIGhhdmUgdGhlIHNhbWUga2V5LCB0aGUgZHVwbGljYXRlcyBhcmUgYWRkZWQgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBrZXlWYWx1ZXNbaV0gPSBrZXlWYWx1ZSA9IGtleS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSArIFwiXCI7XG4gICAgICBpZiAobm9kZUJ5S2V5VmFsdWUuaGFzKGtleVZhbHVlKSkge1xuICAgICAgICBleGl0W2ldID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVCeUtleVZhbHVlLnNldChrZXlWYWx1ZSwgbm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxuICAvLyBJZiB0aGVyZSBhIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMga2V5LCBqb2luIGFuZCBhZGQgaXQgdG8gdXBkYXRlLlxuICAvLyBJZiB0aGVyZSBpcyBub3QgKG9yIHRoZSBrZXkgaXMgYSBkdXBsaWNhdGUpLCBhZGQgaXQgdG8gZW50ZXIuXG4gIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBrZXlWYWx1ZSA9IGtleS5jYWxsKHBhcmVudCwgZGF0YVtpXSwgaSwgZGF0YSkgKyBcIlwiO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWUuZ2V0KGtleVZhbHVlKSkge1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgbm9kZUJ5S2V5VmFsdWUuZGVsZXRlKGtleVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGFueSByZW1haW5pbmcgbm9kZXMgdGhhdCB3ZXJlIG5vdCBib3VuZCB0byBkYXRhIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWVzW2ldKSA9PT0gbm9kZSkpIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkYXR1bShub2RlKSB7XG4gIHJldHVybiBub2RlLl9fZGF0YV9fO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIEFycmF5LmZyb20odGhpcywgZGF0dW0pO1xuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IGFycmF5bGlrZSh2YWx1ZS5jYWxsKHBhcmVudCwgcGFyZW50ICYmIHBhcmVudC5fX2RhdGFfXywgaiwgcGFyZW50cykpLFxuICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgdXBkYXRlR3JvdXAgPSB1cGRhdGVbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIGV4aXRHcm91cCA9IGV4aXRbal0gPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpO1xuXG4gICAgYmluZChwYXJlbnQsIGdyb3VwLCBlbnRlckdyb3VwLCB1cGRhdGVHcm91cCwgZXhpdEdyb3VwLCBkYXRhLCBrZXkpO1xuXG4gICAgLy8gTm93IGNvbm5lY3QgdGhlIGVudGVyIG5vZGVzIHRvIHRoZWlyIGZvbGxvd2luZyB1cGRhdGUgbm9kZSwgc3VjaCB0aGF0XG4gICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcbiAgICAvLyByYXRoZXIgdGhhbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJlbnQgbm9kZS5cbiAgICBmb3IgKHZhciBpMCA9IDAsIGkxID0gMCwgcHJldmlvdXMsIG5leHQ7IGkwIDwgZGF0YUxlbmd0aDsgKytpMCkge1xuICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcbiAgICAgICAgaWYgKGkwID49IGkxKSBpMSA9IGkwICsgMTtcbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IHVwZGF0ZUdyb3VwW2kxXSkgJiYgKytpMSA8IGRhdGFMZW5ndGgpO1xuICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XG4gIHVwZGF0ZS5fZW50ZXIgPSBlbnRlcjtcbiAgdXBkYXRlLl9leGl0ID0gZXhpdDtcbiAgcmV0dXJuIHVwZGF0ZTtcbn1cblxuLy8gR2l2ZW4gc29tZSBkYXRhLCB0aGlzIHJldHVybnMgYW4gYXJyYXktbGlrZSB2aWV3IG9mIGl0OiBhbiBvYmplY3QgdGhhdFxuLy8gZXhwb3NlcyBhIGxlbmd0aCBwcm9wZXJ0eSBhbmQgYWxsb3dzIG51bWVyaWMgaW5kZXhpbmcuIE5vdGUgdGhhdCB1bmxpa2Vcbi8vIHNlbGVjdEFsbCwgdGhpcyBpc27igJl0IHdvcnJpZWQgYWJvdXQg4oCcbGl2ZeKAnSBjb2xsZWN0aW9ucyBiZWNhdXNlIHRoZSByZXN1bHRpbmdcbi8vIGFycmF5IHdpbGwgb25seSBiZSB1c2VkIGJyaWVmbHkgd2hpbGUgZGF0YSBpcyBiZWluZyBib3VuZC4gKEl0IGlzIHBvc3NpYmxlIHRvXG4vLyBjYXVzZSB0aGUgZGF0YSB0byBjaGFuZ2Ugd2hpbGUgaXRlcmF0aW5nIGJ5IHVzaW5nIGEga2V5IGZ1bmN0aW9uLCBidXQgcGxlYXNlXG4vLyBkb27igJl0OyB3ZeKAmWQgcmF0aGVyIGF2b2lkIGEgZ3JhdHVpdG91cyBjb3B5LilcbmZ1bmN0aW9uIGFycmF5bGlrZShkYXRhKSB7XG4gIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gXCJvYmplY3RcIiAmJiBcImxlbmd0aFwiIGluIGRhdGFcbiAgICA/IGRhdGEgLy8gQXJyYXksIFR5cGVkQXJyYXksIE5vZGVMaXN0LCBhcnJheS1saWtlXG4gICAgOiBBcnJheS5mcm9tKGRhdGEpOyAvLyBNYXAsIFNldCwgaXRlcmFibGUsIHN0cmluZywgb3IgYW55dGhpbmcgZWxzZVxufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKCFjb21wYXJlKSBjb21wYXJlID0gYXNjZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGNvbXBhcmVOb2RlKGEsIGIpIHtcbiAgICByZXR1cm4gYSAmJiBiID8gY29tcGFyZShhLl9fZGF0YV9fLCBiLl9fZGF0YV9fKSA6ICFhIC0gIWI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzb3J0Z3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzb3J0Z3JvdXAgPSBzb3J0Z3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzb3J0Z3JvdXBbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3J0Z3JvdXAuc29ydChjb21wYXJlTm9kZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzb3J0Z3JvdXBzLCB0aGlzLl9wYXJlbnRzKS5vcmRlcigpO1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuLi9uYW1lc3BhY2UuanNcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpXG4gICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHJldHVybiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgLy8gbm9kZSBpcyBhIE5vZGVcbiAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgIHx8IG5vZGUuZGVmYXVsdFZpZXc7IC8vIG5vZGUgaXMgYSBEb2N1bWVudFxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3cuanNcIjtcblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2LCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IHN0eWxlUmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvblxuICAgICAgICAgICAgOiBzdHlsZUNvbnN0YW50KShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpXG4gICAgICA6IHN0eWxlVmFsdWUodGhpcy5ub2RlKCksIG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVWYWx1ZShub2RlLCBuYW1lKSB7XG4gIHJldHVybiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSlcbiAgICAgIHx8IGRlZmF1bHRWaWV3KG5vZGUpLmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIHByb3BlcnR5UmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGRlbGV0ZSB0aGlzW25hbWVdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzW25hbWVdID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5RnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSBkZWxldGUgdGhpc1tuYW1lXTtcbiAgICBlbHNlIHRoaXNbbmFtZV0gPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBwcm9wZXJ0eVJlbW92ZSA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXG4gICAgICAgICAgOiBwcm9wZXJ0eUNvbnN0YW50KShuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpW25hbWVdO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuIiwiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwiZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4vbmFtZXNwYWNlLmpzXCI7XG5pbXBvcnQge3hodG1sfSBmcm9tIFwiLi9uYW1lc3BhY2VzLmpzXCI7XG5cbmZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb2N1bWVudCA9IHRoaXMub3duZXJEb2N1bWVudCxcbiAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XG4gICAgcmV0dXJuIHVyaSA9PT0geGh0bWwgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0geGh0bWxcbiAgICAgICAgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG4gICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0b3JGaXhlZChmdWxsbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiAoZnVsbG5hbWUubG9jYWxcbiAgICAgID8gY3JlYXRvckZpeGVkXG4gICAgICA6IGNyZWF0b3JJbmhlcml0KShmdWxsbmFtZSk7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvci5qc1wiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3Rvci5qc1wiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lTm9kZShmYWxzZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKHRydWUpLCBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgPyBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNsb25lLCB0aGlzLm5leHRTaWJsaW5nKSA6IGNsb25lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwiZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQsIHRoaXMuX19kYXRhX18pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgIGlmICghb24pIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5vcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKHZhbHVlKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5vcHRpb25zKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLm9wdGlvbnMgPSBvcHRpb25zKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgb3B0aW9uczogb3B0aW9uc307XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgb3B0aW9ucykpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdENoaWxkIGZyb20gXCIuL3NlbGVjdENoaWxkLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdENoaWxkcmVuIGZyb20gXCIuL3NlbGVjdENoaWxkcmVuLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9qb2luIGZyb20gXCIuL2pvaW4uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlcy5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHkuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2UuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW0uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb24uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2guanNcIjtcbmltcG9ydCBzZWxlY3Rpb25faXRlcmF0b3IgZnJvbSBcIi4vaXRlcmF0b3IuanNcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0aW9uKCkge1xuICByZXR1cm4gdGhpcztcbn1cblxuU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICBzZWxlY3RDaGlsZDogc2VsZWN0aW9uX3NlbGVjdENoaWxkLFxuICBzZWxlY3RDaGlsZHJlbjogc2VsZWN0aW9uX3NlbGVjdENoaWxkcmVuLFxuICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgam9pbjogc2VsZWN0aW9uX2pvaW4sXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogc2VsZWN0aW9uX3NlbGVjdGlvbixcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaCxcbiAgW1N5bWJvbC5pdGVyYXRvcl06IHNlbGVjdGlvbl9pdGVyYXRvclxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4uL2FycmF5LmpzXCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsLmpzXCI7XG5cbmZ1bmN0aW9uIGFycmF5QWxsKHNlbGVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFycmF5KHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ID09PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IGFycmF5QWxsKHNlbGVjdCk7XG4gIGVsc2Ugc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXIuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZS5qc1wiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9leGl0IHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvbmVudGVyLCBvbnVwZGF0ZSwgb25leGl0KSB7XG4gIHZhciBlbnRlciA9IHRoaXMuZW50ZXIoKSwgdXBkYXRlID0gdGhpcywgZXhpdCA9IHRoaXMuZXhpdCgpO1xuICBpZiAodHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGVudGVyID0gb25lbnRlcihlbnRlcik7XG4gICAgaWYgKGVudGVyKSBlbnRlciA9IGVudGVyLnNlbGVjdGlvbigpO1xuICB9IGVsc2Uge1xuICAgIGVudGVyID0gZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgfVxuICBpZiAob251cGRhdGUgIT0gbnVsbCkge1xuICAgIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gICAgaWYgKHVwZGF0ZSkgdXBkYXRlID0gdXBkYXRlLnNlbGVjdGlvbigpO1xuICB9XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICB2YXIgc2VsZWN0aW9uID0gY29udGV4dC5zZWxlY3Rpb24gPyBjb250ZXh0LnNlbGVjdGlvbigpIDogY29udGV4dDtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBub2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5leHQpIF4gNCkgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGxldCBzaXplID0gMDtcbiAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMpICsrc2l6ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMubm9kZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKigpIHtcbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHlpZWxkIG5vZGU7XG4gICAgfVxuICB9XG59XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogKCkgPT4ge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykgfHwgL1tcXHMuXS8udGVzdCh0KSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsInZhciBmcmFtZSA9IDAsIC8vIGlzIGFuIGFuaW1hdGlvbiBmcmFtZSBwZW5kaW5nP1xuICAgIHRpbWVvdXQgPSAwLCAvLyBpcyBhIHRpbWVvdXQgcGVuZGluZz9cbiAgICBpbnRlcnZhbCA9IDAsIC8vIGFyZSBhbnkgdGltZXJzIGFjdGl2ZT9cbiAgICBwb2tlRGVsYXkgPSAxMDAwLCAvLyBob3cgZnJlcXVlbnRseSB3ZSBjaGVjayBmb3IgY2xvY2sgc2tld1xuICAgIHRhc2tIZWFkLFxuICAgIHRhc2tUYWlsLFxuICAgIGNsb2NrTGFzdCA9IDAsXG4gICAgY2xvY2tOb3cgPSAwLFxuICAgIGNsb2NrU2tldyA9IDAsXG4gICAgY2xvY2sgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwib2JqZWN0XCIgJiYgcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2UgOiBEYXRlLFxuICAgIHNldEZyYW1lID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdykgOiBmdW5jdGlvbihmKSB7IHNldFRpbWVvdXQoZiwgMTcpOyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gY2xvY2tOb3cgfHwgKHNldEZyYW1lKGNsZWFyTm93KSwgY2xvY2tOb3cgPSBjbG9jay5ub3coKSArIGNsb2NrU2tldyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICBjbG9ja05vdyA9IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUaW1lcigpIHtcbiAgdGhpcy5fY2FsbCA9XG4gIHRoaXMuX3RpbWUgPVxuICB0aGlzLl9uZXh0ID0gbnVsbDtcbn1cblxuVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVGltZXIsXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICBlbHNlIHRhc2tIZWFkID0gdGhpcztcbiAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHNsZWVwKCk7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lckZsdXNoKCkge1xuICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgKytmcmFtZTsgLy8gUHJldGVuZCB3ZeKAmXZlIHNldCBhbiBhbGFybSwgaWYgd2UgaGF2ZW7igJl0IGFscmVhZHkuXG4gIHZhciB0ID0gdGFza0hlYWQsIGU7XG4gIHdoaWxlICh0KSB7XG4gICAgaWYgKChlID0gY2xvY2tOb3cgLSB0Ll90aW1lKSA+PSAwKSB0Ll9jYWxsLmNhbGwodW5kZWZpbmVkLCBlKTtcbiAgICB0ID0gdC5fbmV4dDtcbiAgfVxuICAtLWZyYW1lO1xufVxuXG5mdW5jdGlvbiB3YWtlKCkge1xuICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gIGZyYW1lID0gdGltZW91dCA9IDA7XG4gIHRyeSB7XG4gICAgdGltZXJGbHVzaCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGZyYW1lID0gMDtcbiAgICBuYXAoKTtcbiAgICBjbG9ja05vdyA9IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9rZSgpIHtcbiAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgaWYgKGRlbGF5ID4gcG9rZURlbGF5KSBjbG9ja1NrZXcgLT0gZGVsYXksIGNsb2NrTGFzdCA9IG5vdztcbn1cblxuZnVuY3Rpb24gbmFwKCkge1xuICB2YXIgdDAsIHQxID0gdGFza0hlYWQsIHQyLCB0aW1lID0gSW5maW5pdHk7XG4gIHdoaWxlICh0MSkge1xuICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgaWYgKHRpbWUgPiB0MS5fdGltZSkgdGltZSA9IHQxLl90aW1lO1xuICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgPSB0MS5fbmV4dCwgdDEuX25leHQgPSBudWxsO1xuICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgIH1cbiAgfVxuICB0YXNrVGFpbCA9IHQwO1xuICBzbGVlcCh0aW1lKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdzsgLy8gU3RyaWN0bHkgbGVzcyB0aGFuIGlmIHdlIHJlY29tcHV0ZWQgY2xvY2tOb3cuXG4gIGlmIChkZWxheSA+IDI0KSB7XG4gICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgdGltZSAtIGNsb2NrLm5vdygpIC0gY2xvY2tTa2V3KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2subm93KCksIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChlbGFwc2VkID0+IHtcbiAgICB0LnN0b3AoKTtcbiAgICBjYWxsYmFjayhlbGFwc2VkICsgZGVsYXkpO1xuICB9LCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge3RpbWVyLCB0aW1lb3V0fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiY2FuY2VsXCIsIFwiaW50ZXJydXB0XCIpO1xudmFyIGVtcHR5VHdlZW4gPSBbXTtcblxuZXhwb3J0IHZhciBDUkVBVEVEID0gMDtcbmV4cG9ydCB2YXIgU0NIRURVTEVEID0gMTtcbmV4cG9ydCB2YXIgU1RBUlRJTkcgPSAyO1xuZXhwb3J0IHZhciBTVEFSVEVEID0gMztcbmV4cG9ydCB2YXIgUlVOTklORyA9IDQ7XG5leHBvcnQgdmFyIEVORElORyA9IDU7XG5leHBvcnQgdmFyIEVOREVEID0gNjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSwgaWQsIGluZGV4LCBncm91cCwgdGltaW5nKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZXMpIG5vZGUuX190cmFuc2l0aW9uID0ge307XG4gIGVsc2UgaWYgKGlkIGluIHNjaGVkdWxlcykgcmV0dXJuO1xuICBjcmVhdGUobm9kZSwgaWQsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIGluZGV4OiBpbmRleCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxuICAgIG9uOiBlbXB0eU9uLFxuICAgIHR3ZWVuOiBlbXB0eVR3ZWVuLFxuICAgIHRpbWU6IHRpbWluZy50aW1lLFxuICAgIGRlbGF5OiB0aW1pbmcuZGVsYXksXG4gICAgZHVyYXRpb246IHRpbWluZy5kdXJhdGlvbixcbiAgICBlYXNlOiB0aW1pbmcuZWFzZSxcbiAgICB0aW1lcjogbnVsbCxcbiAgICBzdGF0ZTogQ1JFQVRFRFxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gQ1JFQVRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgc2NoZWR1bGVkXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gZ2V0KG5vZGUsIGlkKTtcbiAgaWYgKHNjaGVkdWxlLnN0YXRlID4gU1RBUlRFRCkgdGhyb3cgbmV3IEVycm9yKFwidG9vIGxhdGU7IGFscmVhZHkgcnVubmluZ1wiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlIHx8ICEoc2NoZWR1bGUgPSBzY2hlZHVsZVtpZF0pKSB0aHJvdyBuZXcgRXJyb3IoXCJ0cmFuc2l0aW9uIG5vdCBmb3VuZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobm9kZSwgaWQsIHNlbGYpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgdHdlZW47XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXG4gIC8vIE5vdGUgdGhlIGFjdHVhbCBkZWxheSBpcyBub3Qga25vd24gdW50aWwgdGhlIGZpcnN0IGNhbGxiYWNrIVxuICBzY2hlZHVsZXNbaWRdID0gc2VsZjtcbiAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcbiAgICBzZWxmLnN0YXRlID0gU0NIRURVTEVEO1xuICAgIHNlbGYudGltZXIucmVzdGFydChzdGFydCwgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcblxuICAgIC8vIElmIHRoZSBlbGFwc2VkIGRlbGF5IGlzIGxlc3MgdGhhbiBvdXIgZmlyc3Qgc2xlZXAsIHN0YXJ0IGltbWVkaWF0ZWx5LlxuICAgIGlmIChzZWxmLmRlbGF5IDw9IGVsYXBzZWQpIHN0YXJ0KGVsYXBzZWQgLSBzZWxmLmRlbGF5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGVsYXBzZWQpIHtcbiAgICB2YXIgaSwgaiwgbiwgbztcblxuICAgIC8vIElmIHRoZSBzdGF0ZSBpcyBub3QgU0NIRURVTEVELCB0aGVuIHdlIHByZXZpb3VzbHkgZXJyb3JlZCBvbiBzdGFydC5cbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU0NIRURVTEVEKSByZXR1cm4gc3RvcCgpO1xuXG4gICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgICAgbyA9IHNjaGVkdWxlc1tpXTtcbiAgICAgIGlmIChvLm5hbWUgIT09IHNlbGYubmFtZSkgY29udGludWU7XG5cbiAgICAgIC8vIFdoaWxlIHRoaXMgZWxlbWVudCBhbHJlYWR5IGhhcyBhIHN0YXJ0aW5nIHRyYW5zaXRpb24gZHVyaW5nIHRoaXMgZnJhbWUsXG4gICAgICAvLyBkZWZlciBzdGFydGluZyBhbiBpbnRlcnJ1cHRpbmcgdHJhbnNpdGlvbiB1bnRpbCB0aGF0IHRyYW5zaXRpb24gaGFzIGFcbiAgICAgIC8vIGNoYW5jZSB0byB0aWNrIChhbmQgcG9zc2libHkgZW5kKTsgc2VlIGQzL2QzLXRyYW5zaXRpb24jNTQhXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gU1RBUlRFRCkgcmV0dXJuIHRpbWVvdXQoc3RhcnQpO1xuXG4gICAgICAvLyBJbnRlcnJ1cHQgdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBpZiBhbnkuXG4gICAgICBpZiAoby5zdGF0ZSA9PT0gUlVOTklORykge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJpbnRlcnJ1cHRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG5cbiAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy5cbiAgICAgIGVsc2UgaWYgKCtpIDwgaWQpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmVyIHRoZSBmaXJzdCB0aWNrIHRvIGVuZCBvZiB0aGUgY3VycmVudCBmcmFtZTsgc2VlIGQzL2QzIzE1NzYuXG4gICAgLy8gTm90ZSB0aGUgdHJhbnNpdGlvbiBtYXkgYmUgY2FuY2VsZWQgYWZ0ZXIgc3RhcnQgYW5kIGJlZm9yZSB0aGUgZmlyc3QgdGljayFcbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXG4gICAgLy8gQXNzdW1pbmcgdGhpcyBpcyBzdWNjZXNzZnVsLCBzdWJzZXF1ZW50IGNhbGxiYWNrcyBnbyBzdHJhaWdodCB0byB0aWNrLlxuICAgIHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gU1RBUlRFRCkge1xuICAgICAgICBzZWxmLnN0YXRlID0gUlVOTklORztcbiAgICAgICAgc2VsZi50aW1lci5yZXN0YXJ0KHRpY2ssIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG4gICAgICAgIHRpY2soZWxhcHNlZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgc3RhcnQgZXZlbnQuXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cbiAgICBzZWxmLnN0YXRlID0gU1RBUlRJTkc7XG4gICAgc2VsZi5vbi5jYWxsKFwic3RhcnRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJURUQ7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSB0d2VlbiwgZGVsZXRpbmcgbnVsbCB0d2Vlbi5cbiAgICB0d2VlbiA9IG5ldyBBcnJheShuID0gc2VsZi50d2Vlbi5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG8gPSBzZWxmLnR3ZWVuW2ldLnZhbHVlLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCkpIHtcbiAgICAgICAgdHdlZW5bKytqXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIHR3ZWVuLmxlbmd0aCA9IGogKyAxO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XG4gICAgdmFyIHQgPSBlbGFwc2VkIDwgc2VsZi5kdXJhdGlvbiA/IHNlbGYuZWFzZS5jYWxsKG51bGwsIGVsYXBzZWQgLyBzZWxmLmR1cmF0aW9uKSA6IChzZWxmLnRpbWVyLnJlc3RhcnQoc3RvcCksIHNlbGYuc3RhdGUgPSBFTkRJTkcsIDEpLFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSB0d2Vlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgdHdlZW5baV0uY2FsbChub2RlLCB0KTtcbiAgICB9XG5cbiAgICAvLyBEaXNwYXRjaCB0aGUgZW5kIGV2ZW50LlxuICAgIGlmIChzZWxmLnN0YXRlID09PSBFTkRJTkcpIHtcbiAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHNlbGYuc3RhdGUgPSBFTkRFRDtcbiAgICBzZWxmLnRpbWVyLnN0b3AoKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2lkXTtcbiAgICBmb3IgKHZhciBpIGluIHNjaGVkdWxlcykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgPSArYiwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICogKDEgLSB0KSArIGIgKiB0O1xuICB9O1xufVxuIiwidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZS5qc1wiO1xuXG52YXIgc3ZnTm9kZTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNzcyh2YWx1ZSkge1xuICBjb25zdCBtID0gbmV3ICh0eXBlb2YgRE9NTWF0cml4ID09PSBcImZ1bmN0aW9uXCIgPyBET01NYXRyaXggOiBXZWJLaXRDU1NNYXRyaXgpKHZhbHVlICsgXCJcIik7XG4gIHJldHVybiBtLmlzSWRlbnRpdHkgPyBpZGVudGl0eSA6IGRlY29tcG9zZShtLmEsIG0uYiwgbS5jLCBtLmQsIG0uZSwgbS5mKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghc3ZnTm9kZSkgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTtcbiAgc3ZnTm9kZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdmFsdWUpO1xuICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eTtcbiAgdmFsdWUgPSB2YWx1ZS5tYXRyaXg7XG4gIHJldHVybiBkZWNvbXBvc2UodmFsdWUuYSwgdmFsdWUuYiwgdmFsdWUuYywgdmFsdWUuZCwgdmFsdWUuZSwgdmFsdWUuZik7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuLi9udW1iZXIuanNcIjtcbmltcG9ydCB7cGFyc2VDc3MsIHBhcnNlU3ZnfSBmcm9tIFwiLi9wYXJzZS5qc1wiO1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZSwgcHhDb21tYSwgcHhQYXJlbiwgZGVnUGFyZW4pIHtcblxuICBmdW5jdGlvbiBwb3Aocykge1xuICAgIHJldHVybiBzLmxlbmd0aCA/IHMucG9wKCkgKyBcIiBcIiA6IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIHB4Q29tbWEsIG51bGwsIHB4UGFyZW4pO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiB8fCB5Yikge1xuICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgeGIgKyBweENvbW1hICsgeWIgKyBweFBhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGUoYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBpZiAoYSAtIGIgPiAxODApIGIgKz0gMzYwOyBlbHNlIGlmIChiIC0gYSA+IDE4MCkgYSArPSAzNjA7IC8vIHNob3J0ZXN0IHBhdGhcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2tld1goYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiAhPT0gMSB8fCB5YiAhPT0gMSkge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIgKyB4YiArIFwiLFwiICsgeWIgKyBcIilcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xuICAgIHRyYW5zbGF0ZShhLnRyYW5zbGF0ZVgsIGEudHJhbnNsYXRlWSwgYi50cmFuc2xhdGVYLCBiLnRyYW5zbGF0ZVksIHMsIHEpO1xuICAgIHJvdGF0ZShhLnJvdGF0ZSwgYi5yb3RhdGUsIHMsIHEpO1xuICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xuICAgIHNjYWxlKGEuc2NhbGVYLCBhLnNjYWxlWSwgYi5zY2FsZVgsIGIuc2NhbGVZLCBzLCBxKTtcbiAgICBhID0gYiA9IG51bGw7IC8vIGdjXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZUNzcywgXCJweCwgXCIsIFwicHgpXCIsIFwiZGVnKVwiKTtcbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZVN2ZywgXCIsIFwiLCBcIilcIiwgXCIpXCIpO1xuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnN0cnVjdG9yLCBmYWN0b3J5LCBwcm90b3R5cGUpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gZmFjdG9yeS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQucHJvdG90eXBlKTtcbiAgZm9yICh2YXIga2V5IGluIGRlZmluaXRpb24pIHByb3RvdHlwZVtrZXldID0gZGVmaW5pdGlvbltrZXldO1xuICByZXR1cm4gcHJvdG90eXBlO1xufVxuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvcigpIHt9XG5cbmV4cG9ydCB2YXIgZGFya2VyID0gMC43O1xuZXhwb3J0IHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XG5cbnZhciByZUkgPSBcIlxcXFxzKihbKy1dP1xcXFxkKylcXFxccypcIixcbiAgICByZU4gPSBcIlxcXFxzKihbKy1dPyg/OlxcXFxkKlxcXFwuKT9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dPyg/OlxcXFxkKlxcXFwuKT9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXggPSAvXiMoWzAtOWEtZl17Myw4fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKGBecmdiXFxcXCgke3JlSX0sJHtyZUl9LCR7cmVJfVxcXFwpJGApLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoYF5yZ2JcXFxcKCR7cmVQfSwke3JlUH0sJHtyZVB9XFxcXCkkYCksXG4gICAgcmVSZ2JhSW50ZWdlciA9IG5ldyBSZWdFeHAoYF5yZ2JhXFxcXCgke3JlSX0sJHtyZUl9LCR7cmVJfSwke3JlTn1cXFxcKSRgKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChgXnJnYmFcXFxcKCR7cmVQfSwke3JlUH0sJHtyZVB9LCR7cmVOfVxcXFwpJGApLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoYF5oc2xcXFxcKCR7cmVOfSwke3JlUH0sJHtyZVB9XFxcXCkkYCksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoYF5oc2xhXFxcXCgke3JlTn0sJHtyZVB9LCR7cmVQfSwke3JlTn1cXFxcKSRgKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgY29weShjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gIH0sXG4gIGhleDogY29sb3JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IGNvbG9yX2Zvcm1hdEhleCxcbiAgZm9ybWF0SGV4ODogY29sb3JfZm9ybWF0SGV4OCxcbiAgZm9ybWF0SHNsOiBjb2xvcl9mb3JtYXRIc2wsXG4gIGZvcm1hdFJnYjogY29sb3JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogY29sb3JfZm9ybWF0UmdiXG59KTtcblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gdGhpcy5yZ2IoKS5mb3JtYXRIZXgoKTtcbn1cblxuZnVuY3Rpb24gY29sb3JfZm9ybWF0SGV4OCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4OCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIc2woKSB7XG4gIHJldHVybiBoc2xDb252ZXJ0KHRoaXMpLmZvcm1hdEhzbCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRSZ2IoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdFJnYigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG0sIGw7XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXguZXhlYyhmb3JtYXQpKSA/IChsID0gbVsxXS5sZW5ndGgsIG0gPSBwYXJzZUludChtWzFdLCAxNiksIGwgPT09IDYgPyByZ2JuKG0pIC8vICNmZjAwMDBcbiAgICAgIDogbCA9PT0gMyA/IG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkgLy8gI2YwMFxuICAgICAgOiBsID09PSA4ID8gcmdiYShtID4+IDI0ICYgMHhmZiwgbSA+PiAxNiAmIDB4ZmYsIG0gPj4gOCAmIDB4ZmYsIChtICYgMHhmZikgLyAweGZmKSAvLyAjZmYwMDAwMDBcbiAgICAgIDogbCA9PT0gNCA/IHJnYmEoKG0gPj4gMTIgJiAweGYpIHwgKG0gPj4gOCAmIDB4ZjApLCAobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSkgLyAweGZmKSAvLyAjZjAwMFxuICAgICAgOiBudWxsKSAvLyBpbnZhbGlkIGhleFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXIoaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXIoaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY2xhbXAoKSB7XG4gICAgcmV0dXJuIG5ldyBSZ2IoY2xhbXBpKHRoaXMuciksIGNsYW1waSh0aGlzLmcpLCBjbGFtcGkodGhpcy5iKSwgY2xhbXBhKHRoaXMub3BhY2l0eSkpO1xuICB9LFxuICBkaXNwbGF5YWJsZSgpIHtcbiAgICByZXR1cm4gKC0wLjUgPD0gdGhpcy5yICYmIHRoaXMuciA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmcgJiYgdGhpcy5nIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuYiAmJiB0aGlzLmIgPCAyNTUuNSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiByZ2JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IHJnYl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhleDg6IHJnYl9mb3JtYXRIZXg4LFxuICBmb3JtYXRSZ2I6IHJnYl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiByZ2JfZm9ybWF0UmdiXG59KSk7XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiBgIyR7aGV4KHRoaXMucil9JHtoZXgodGhpcy5nKX0ke2hleCh0aGlzLmIpfWA7XG59XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRIZXg4KCkge1xuICByZXR1cm4gYCMke2hleCh0aGlzLnIpfSR7aGV4KHRoaXMuZyl9JHtoZXgodGhpcy5iKX0ke2hleCgoaXNOYU4odGhpcy5vcGFjaXR5KSA/IDEgOiB0aGlzLm9wYWNpdHkpICogMjU1KX1gO1xufVxuXG5mdW5jdGlvbiByZ2JfZm9ybWF0UmdiKCkge1xuICBjb25zdCBhID0gY2xhbXBhKHRoaXMub3BhY2l0eSk7XG4gIHJldHVybiBgJHthID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCJ9JHtjbGFtcGkodGhpcy5yKX0sICR7Y2xhbXBpKHRoaXMuZyl9LCAke2NsYW1waSh0aGlzLmIpfSR7YSA9PT0gMSA/IFwiKVwiIDogYCwgJHthfSlgfWA7XG59XG5cbmZ1bmN0aW9uIGNsYW1wYShvcGFjaXR5KSB7XG4gIHJldHVybiBpc05hTihvcGFjaXR5KSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBvcGFjaXR5KSk7XG59XG5cbmZ1bmN0aW9uIGNsYW1waSh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG59XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IGNsYW1waSh2YWx1ZSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGNsYW1wKCkge1xuICAgIHJldHVybiBuZXcgSHNsKGNsYW1waCh0aGlzLmgpLCBjbGFtcHQodGhpcy5zKSwgY2xhbXB0KHRoaXMubCksIGNsYW1wYSh0aGlzLm9wYWNpdHkpKTtcbiAgfSxcbiAgZGlzcGxheWFibGUoKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGZvcm1hdEhzbCgpIHtcbiAgICBjb25zdCBhID0gY2xhbXBhKHRoaXMub3BhY2l0eSk7XG4gICAgcmV0dXJuIGAke2EgPT09IDEgPyBcImhzbChcIiA6IFwiaHNsYShcIn0ke2NsYW1waCh0aGlzLmgpfSwgJHtjbGFtcHQodGhpcy5zKSAqIDEwMH0lLCAke2NsYW1wdCh0aGlzLmwpICogMTAwfSUke2EgPT09IDEgPyBcIilcIiA6IGAsICR7YX0pYH1gO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIGNsYW1waCh2YWx1ZSkge1xuICB2YWx1ZSA9ICh2YWx1ZSB8fCAwKSAlIDM2MDtcbiAgcmV0dXJuIHZhbHVlIDwgMCA/IHZhbHVlICsgMzYwIDogdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNsYW1wdCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdmFsdWUgfHwgMCkpO1xufVxuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgeCA9PiAoKSA9PiB4O1xuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5cbmZ1bmN0aW9uIGxpbmVhcihhLCBkKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnRpYWwoYSwgYiwgeSkge1xuICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhID8gZXhwb25lbnRpYWwoYSwgYiwgeSkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG4iLCJpbXBvcnQge3JnYiBhcyBjb2xvclJnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgYmFzaXMgZnJvbSBcIi4vYmFzaXMuanNcIjtcbmltcG9ydCBiYXNpc0Nsb3NlZCBmcm9tIFwiLi9iYXNpc0Nsb3NlZC5qc1wiO1xuaW1wb3J0IG5vZ2FtbWEsIHtnYW1tYX0gZnJvbSBcIi4vY29sb3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYjtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yLnIgPSByKHQpO1xuICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyk7XG5leHBvcnQgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcbiIsImltcG9ydCB7YmFzaXN9IGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxuICAgICAgICB2MCA9IHZhbHVlc1soaSArIG4gLSAxKSAlIG5dLFxuICAgICAgICB2MSA9IHZhbHVlc1tpICUgbl0sXG4gICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcbiAgICAgICAgdjMgPSB2YWx1ZXNbKGkgKyAyKSAlIG5dO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlVmFyeWluZyBmcm9tIFwiLi9lYXNlVmFyeWluZy5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHRUd2VlbiBmcm9tIFwiLi90ZXh0VHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmQuanNcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBzZWxlY3RDaGlsZDogc2VsZWN0aW9uX3Byb3RvdHlwZS5zZWxlY3RDaGlsZCxcbiAgc2VsZWN0Q2hpbGRyZW46IHNlbGVjdGlvbl9wcm90b3R5cGUuc2VsZWN0Q2hpbGRyZW4sXG4gIGZpbHRlcjogdHJhbnNpdGlvbl9maWx0ZXIsXG4gIG1lcmdlOiB0cmFuc2l0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uX3RyYW5zaXRpb24sXG4gIGNhbGw6IHNlbGVjdGlvbl9wcm90b3R5cGUuY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX3Byb3RvdHlwZS5lYWNoLFxuICBvbjogdHJhbnNpdGlvbl9vbixcbiAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICBhdHRyVHdlZW46IHRyYW5zaXRpb25fYXR0clR3ZWVuLFxuICBzdHlsZTogdHJhbnNpdGlvbl9zdHlsZSxcbiAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICB0ZXh0OiB0cmFuc2l0aW9uX3RleHQsXG4gIHRleHRUd2VlbjogdHJhbnNpdGlvbl90ZXh0VHdlZW4sXG4gIHJlbW92ZTogdHJhbnNpdGlvbl9yZW1vdmUsXG4gIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICBkZWxheTogdHJhbnNpdGlvbl9kZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25fZHVyYXRpb24sXG4gIGVhc2U6IHRyYW5zaXRpb25fZWFzZSxcbiAgZWFzZVZhcnlpbmc6IHRyYW5zaXRpb25fZWFzZVZhcnlpbmcsXG4gIGVuZDogdHJhbnNpdGlvbl9lbmQsXG4gIFtTeW1ib2wuaXRlcmF0b3JdOiBzZWxlY3Rpb25fcHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl1cbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBlYXNlVmFyeWluZyhpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodHlwZW9mIHYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy5lYWNoKGVhc2VWYXJ5aW5nKHRoaXMuX2lkLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgb24wLCBvbjEsIHRoYXQgPSB0aGlzLCBpZCA9IHRoYXQuX2lkLCBzaXplID0gdGhhdC5zaXplKCk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgY2FuY2VsID0ge3ZhbHVlOiByZWplY3R9LFxuICAgICAgICBlbmQgPSB7dmFsdWU6IGZ1bmN0aW9uKCkgeyBpZiAoLS1zaXplID09PSAwKSByZXNvbHZlKCk7IH19O1xuXG4gICAgdGhhdC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKG9uICE9PSBvbjApIHtcbiAgICAgICAgb24xID0gKG9uMCA9IG9uKS5jb3B5KCk7XG4gICAgICAgIG9uMS5fLmNhbmNlbC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmludGVycnVwdC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmVuZC5wdXNoKGVuZCk7XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICAgIH0pO1xuXG4gICAgLy8gVGhlIHNlbGVjdGlvbiB3YXMgZW1wdHksIHJlc29sdmUgZW5kIGltbWVkaWF0ZWx5XG4gICAgaWYgKHNpemUgPT09IDApIHJlc29sdmUoKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlIGZyb20gXCIuLi90cmFuc2l0aW9uL3NjaGVkdWxlLmpzXCI7XG5pbXBvcnQge2Vhc2VDdWJpY0luT3V0fSBmcm9tIFwiZDMtZWFzZVwiO1xuaW1wb3J0IHtub3d9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZGVmYXVsdFRpbWluZyA9IHtcbiAgdGltZTogbnVsbCwgLy8gU2V0IG9uIHVzZS5cbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiAyNTAsXG4gIGVhc2U6IGVhc2VDdWJpY0luT3V0XG59O1xuXG5mdW5jdGlvbiBpbmhlcml0KG5vZGUsIGlkKSB7XG4gIHZhciB0aW1pbmc7XG4gIHdoaWxlICghKHRpbWluZyA9IG5vZGUuX190cmFuc2l0aW9uKSB8fCAhKHRpbWluZyA9IHRpbWluZ1tpZF0pKSB7XG4gICAgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdHJhbnNpdGlvbiAke2lkfSBub3QgZm91bmRgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRpbWluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgaWQsXG4gICAgICB0aW1pbmc7XG5cbiAgaWYgKG5hbWUgaW5zdGFuY2VvZiBUcmFuc2l0aW9uKSB7XG4gICAgaWQgPSBuYW1lLl9pZCwgbmFtZSA9IG5hbWUuX25hbWU7XG4gIH0gZWxzZSB7XG4gICAgaWQgPSBuZXdJZCgpLCAodGltaW5nID0gZGVmYXVsdFRpbWluZykudGltZSA9IG5vdygpLCBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGksIGdyb3VwLCB0aW1pbmcgfHwgaW5oZXJpdChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBzZWxlY3Rpb25faW50ZXJydXB0IGZyb20gXCIuL2ludGVycnVwdC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb24uanNcIjtcblxuc2VsZWN0aW9uLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBzZWxlY3Rpb25faW50ZXJydXB0O1xuc2VsZWN0aW9uLnByb3RvdHlwZS50cmFuc2l0aW9uID0gc2VsZWN0aW9uX3RyYW5zaXRpb247XG4iLCJpbXBvcnQgaW50ZXJydXB0IGZyb20gXCIuLi9pbnRlcnJ1cHQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGludGVycnVwdCh0aGlzLCBuYW1lKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge1NUQVJUSU5HLCBFTkRJTkcsIEVOREVEfSBmcm9tIFwiLi90cmFuc2l0aW9uL3NjaGVkdWxlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUsXG4gICAgICBhY3RpdmUsXG4gICAgICBlbXB0eSA9IHRydWUsXG4gICAgICBpO1xuXG4gIGlmICghc2NoZWR1bGVzKSByZXR1cm47XG5cbiAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcblxuICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgaWYgKChzY2hlZHVsZSA9IHNjaGVkdWxlc1tpXSkubmFtZSAhPT0gbmFtZSkgeyBlbXB0eSA9IGZhbHNlOyBjb250aW51ZTsgfVxuICAgIGFjdGl2ZSA9IHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcgJiYgc2NoZWR1bGUuc3RhdGUgPCBFTkRJTkc7XG4gICAgc2NoZWR1bGUuc3RhdGUgPSBFTkRFRDtcbiAgICBzY2hlZHVsZS50aW1lci5zdG9wKCk7XG4gICAgc2NoZWR1bGUub24uY2FsbChhY3RpdmUgPyBcImludGVycnVwdFwiIDogXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7ZHJhZ0Rpc2FibGUsIGRyYWdFbmFibGV9IGZyb20gXCJkMy1kcmFnXCI7XG5pbXBvcnQge2ludGVycG9sYXRlfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7cG9pbnRlciwgc2VsZWN0fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IEJydXNoRXZlbnQgZnJvbSBcIi4vZXZlbnQuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG52YXIgTU9ERV9EUkFHID0ge25hbWU6IFwiZHJhZ1wifSxcbiAgICBNT0RFX1NQQUNFID0ge25hbWU6IFwic3BhY2VcIn0sXG4gICAgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn0sXG4gICAgTU9ERV9DRU5URVIgPSB7bmFtZTogXCJjZW50ZXJcIn07XG5cbmNvbnN0IHthYnMsIG1heCwgbWlufSA9IE1hdGg7XG5cbmZ1bmN0aW9uIG51bWJlcjEoZSkge1xuICByZXR1cm4gWytlWzBdLCArZVsxXV07XG59XG5cbmZ1bmN0aW9uIG51bWJlcjIoZSkge1xuICByZXR1cm4gW251bWJlcjEoZVswXSksIG51bWJlcjEoZVsxXSldO1xufVxuXG52YXIgWCA9IHtcbiAgbmFtZTogXCJ4XCIsXG4gIGhhbmRsZXM6IFtcIndcIiwgXCJlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHgsIGUpIHsgcmV0dXJuIHggPT0gbnVsbCA/IG51bGwgOiBbWyt4WzBdLCBlWzBdWzFdXSwgWyt4WzFdLCBlWzFdWzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVswXSwgeHlbMV1bMF1dOyB9XG59O1xuXG52YXIgWSA9IHtcbiAgbmFtZTogXCJ5XCIsXG4gIGhhbmRsZXM6IFtcIm5cIiwgXCJzXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHksIGUpIHsgcmV0dXJuIHkgPT0gbnVsbCA/IG51bGwgOiBbW2VbMF1bMF0sICt5WzBdXSwgW2VbMV1bMF0sICt5WzFdXV07IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ICYmIFt4eVswXVsxXSwgeHlbMV1bMV1dOyB9XG59O1xuXG52YXIgWFkgPSB7XG4gIG5hbWU6IFwieHlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcIndcIiwgXCJlXCIsIFwic1wiLCBcIm53XCIsIFwibmVcIiwgXCJzd1wiLCBcInNlXCJdLm1hcCh0eXBlKSxcbiAgaW5wdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSA9PSBudWxsID8gbnVsbCA6IG51bWJlcjIoeHkpOyB9LFxuICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxufTtcblxudmFyIGN1cnNvcnMgPSB7XG4gIG92ZXJsYXk6IFwiY3Jvc3NoYWlyXCIsXG4gIHNlbGVjdGlvbjogXCJtb3ZlXCIsXG4gIG46IFwibnMtcmVzaXplXCIsXG4gIGU6IFwiZXctcmVzaXplXCIsXG4gIHM6IFwibnMtcmVzaXplXCIsXG4gIHc6IFwiZXctcmVzaXplXCIsXG4gIG53OiBcIm53c2UtcmVzaXplXCIsXG4gIG5lOiBcIm5lc3ctcmVzaXplXCIsXG4gIHNlOiBcIm53c2UtcmVzaXplXCIsXG4gIHN3OiBcIm5lc3ctcmVzaXplXCJcbn07XG5cbnZhciBmbGlwWCA9IHtcbiAgZTogXCJ3XCIsXG4gIHc6IFwiZVwiLFxuICBudzogXCJuZVwiLFxuICBuZTogXCJud1wiLFxuICBzZTogXCJzd1wiLFxuICBzdzogXCJzZVwiXG59O1xuXG52YXIgZmxpcFkgPSB7XG4gIG46IFwic1wiLFxuICBzOiBcIm5cIixcbiAgbnc6IFwic3dcIixcbiAgbmU6IFwic2VcIixcbiAgc2U6IFwibmVcIixcbiAgc3c6IFwibndcIlxufTtcblxudmFyIHNpZ25zWCA9IHtcbiAgb3ZlcmxheTogKzEsXG4gIHNlbGVjdGlvbjogKzEsXG4gIG46IG51bGwsXG4gIGU6ICsxLFxuICBzOiBudWxsLFxuICB3OiAtMSxcbiAgbnc6IC0xLFxuICBuZTogKzEsXG4gIHNlOiArMSxcbiAgc3c6IC0xXG59O1xuXG52YXIgc2lnbnNZID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogLTEsXG4gIGU6IG51bGwsXG4gIHM6ICsxLFxuICB3OiBudWxsLFxuICBudzogLTEsXG4gIG5lOiAtMSxcbiAgc2U6ICsxLFxuICBzdzogKzFcbn07XG5cbmZ1bmN0aW9uIHR5cGUodCkge1xuICByZXR1cm4ge3R5cGU6IHR9O1xufVxuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoZXZlbnQpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICBpZiAoc3ZnLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICBzdmcgPSBzdmcudmlld0JveC5iYXNlVmFsO1xuICAgIHJldHVybiBbW3N2Zy54LCBzdmcueV0sIFtzdmcueCArIHN2Zy53aWR0aCwgc3ZnLnkgKyBzdmcuaGVpZ2h0XV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIOKAnF9fYnJ1c2jigJ0gcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbChub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoU2VsZWN0aW9uKG5vZGUpIHtcbiAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2goWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFkoKSB7XG4gIHJldHVybiBicnVzaChZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBicnVzaChYWSk7XG59XG5cbmZ1bmN0aW9uIGJydXNoKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAga2V5cyA9IHRydWUsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiYnJ1c2hcIiwgXCJlbmRcIiksXG4gICAgICBoYW5kbGVTaXplID0gNixcbiAgICAgIHRvdWNoZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGJydXNoKGdyb3VwKSB7XG4gICAgdmFyIG92ZXJsYXkgPSBncm91cFxuICAgICAgICAucHJvcGVydHkoXCJfX2JydXNoXCIsIGluaXRpYWxpemUpXG4gICAgICAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcbiAgICAgIC5kYXRhKFt0eXBlKFwib3ZlcmxheVwiKV0pO1xuXG4gICAgb3ZlcmxheS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm92ZXJsYXlcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpXG4gICAgICAubWVyZ2Uob3ZlcmxheSlcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGV4dGVudCA9IGxvY2FsKHRoaXMpLmV4dGVudDtcbiAgICAgICAgICBzZWxlY3QodGhpcylcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGV4dGVudFswXVswXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGV4dGVudFswXVsxXSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSk7XG4gICAgICAgIH0pO1xuXG4gICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgLmRhdGEoW3R5cGUoXCJzZWxlY3Rpb25cIildKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwic2VsZWN0aW9uXCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDAuMylcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCIjZmZmXCIpXG4gICAgICAgIC5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcblxuICAgIHZhciBoYW5kbGUgPSBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXG4gICAgICAuZGF0YShkaW0uaGFuZGxlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlOyB9KTtcblxuICAgIGhhbmRsZS5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICBoYW5kbGUuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJoYW5kbGUgaGFuZGxlLS1cIiArIGQudHlwZTsgfSlcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3Vyc29yc1tkLnR5cGVdOyB9KTtcblxuICAgIGdyb3VwXG4gICAgICAgIC5lYWNoKHJlZHJhdylcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxuICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXG4gICAgICAgIC5vbihcIm1vdXNlZG93bi5icnVzaFwiLCBzdGFydGVkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuYnJ1c2hcIiwgc3RhcnRlZClcbiAgICAgICAgLm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLmJydXNoIHRvdWNoY2FuY2VsLmJydXNoXCIsIHRvdWNoZW5kZWQpXG4gICAgICAgIC5zdHlsZShcInRvdWNoLWFjdGlvblwiLCBcIm5vbmVcIilcbiAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcbiAgfVxuXG4gIGJydXNoLm1vdmUgPSBmdW5jdGlvbihncm91cCwgc2VsZWN0aW9uLCBldmVudCkge1xuICAgIGlmIChncm91cC50d2Vlbikge1xuICAgICAgZ3JvdXBcbiAgICAgICAgICAub24oXCJzdGFydC5icnVzaFwiLCBmdW5jdGlvbihldmVudCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKS5zdGFydChldmVudCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbihldmVudCkgeyBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kKGV2ZW50KTsgfSlcbiAgICAgICAgICAudHdlZW4oXCJicnVzaFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMpLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbjAgPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoc2VsZWN0aW9uMCwgc2VsZWN0aW9uMSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHR3ZWVuKHQpIHtcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gdCA9PT0gMSAmJiBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IGkodCk7XG4gICAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgICAgICAgICAgICBlbWl0LmJydXNoKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxlY3Rpb24wICE9PSBudWxsICYmIHNlbGVjdGlvbjEgIT09IG51bGwgPyB0d2VlbiA6IHR3ZWVuKDEpO1xuICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBncm91cFxuICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhhdCwgYXJncykgOiBzZWxlY3Rpb24sIHN0YXRlLmV4dGVudCksXG4gICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJncykuYmVmb3Jlc3RhcnQoKTtcblxuICAgICAgICAgICAgaW50ZXJydXB0KHRoYXQpO1xuICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PT0gbnVsbCA/IG51bGwgOiBzZWxlY3Rpb24xO1xuICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICBlbWl0LnN0YXJ0KGV2ZW50KS5icnVzaChldmVudCkuZW5kKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgYnJ1c2guY2xlYXIgPSBmdW5jdGlvbihncm91cCwgZXZlbnQpIHtcbiAgICBicnVzaC5tb3ZlKGdyb3VwLCBudWxsLCBldmVudCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICB2YXIgZW1pdCA9IHRoYXQuX19icnVzaC5lbWl0dGVyO1xuICAgIHJldHVybiBlbWl0ICYmICghY2xlYW4gfHwgIWVtaXQuY2xlYW4pID8gZW1pdCA6IG5ldyBFbWl0dGVyKHRoYXQsIGFyZ3MsIGNsZWFuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgdGhpcy5jbGVhbiA9IGNsZWFuO1xuICB9XG5cbiAgRW1pdHRlci5wcm90b3R5cGUgPSB7XG4gICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHRoaXMuc3RhdGUuZW1pdHRlciA9IHRoaXMsIHRoaXMuc3RhcnRpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24oZXZlbnQsIG1vZGUpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIsIGV2ZW50LCBtb2RlKTtcbiAgICAgIGVsc2UgdGhpcy5lbWl0KFwiYnJ1c2hcIiwgZXZlbnQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBicnVzaDogZnVuY3Rpb24oZXZlbnQsIG1vZGUpIHtcbiAgICAgIHRoaXMuZW1pdChcImJydXNoXCIsIGV2ZW50LCBtb2RlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbihldmVudCwgbW9kZSkge1xuICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIGRlbGV0ZSB0aGlzLnN0YXRlLmVtaXR0ZXIsIHRoaXMuZW1pdChcImVuZFwiLCBldmVudCwgbW9kZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVtaXQ6IGZ1bmN0aW9uKHR5cGUsIGV2ZW50LCBtb2RlKSB7XG4gICAgICB2YXIgZCA9IHNlbGVjdCh0aGlzLnRoYXQpLmRhdHVtKCk7XG4gICAgICBsaXN0ZW5lcnMuY2FsbChcbiAgICAgICAgdHlwZSxcbiAgICAgICAgdGhpcy50aGF0LFxuICAgICAgICBuZXcgQnJ1c2hFdmVudCh0eXBlLCB7XG4gICAgICAgICAgc291cmNlRXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIHRhcmdldDogYnJ1c2gsXG4gICAgICAgICAgc2VsZWN0aW9uOiBkaW0ub3V0cHV0KHRoaXMuc3RhdGUuc2VsZWN0aW9uKSxcbiAgICAgICAgICBtb2RlLFxuICAgICAgICAgIGRpc3BhdGNoOiBsaXN0ZW5lcnNcbiAgICAgICAgfSksXG4gICAgICAgIGRcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YXJ0ZWQoZXZlbnQpIHtcbiAgICBpZiAodG91Y2hlbmRpbmcgJiYgIWV2ZW50LnRvdWNoZXMpIHJldHVybjtcbiAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XG5cbiAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgIHR5cGUgPSBldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcbiAgICAgICAgbW9kZSA9IChrZXlzICYmIGV2ZW50Lm1ldGFLZXkgPyB0eXBlID0gXCJvdmVybGF5XCIgOiB0eXBlKSA9PT0gXCJzZWxlY3Rpb25cIiA/IE1PREVfRFJBRyA6IChrZXlzICYmIGV2ZW50LmFsdEtleSA/IE1PREVfQ0VOVEVSIDogTU9ERV9IQU5ETEUpLFxuICAgICAgICBzaWduWCA9IGRpbSA9PT0gWSA/IG51bGwgOiBzaWduc1hbdHlwZV0sXG4gICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcbiAgICAgICAgc3RhdGUgPSBsb2NhbCh0aGF0KSxcbiAgICAgICAgZXh0ZW50ID0gc3RhdGUuZXh0ZW50LFxuICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb24sXG4gICAgICAgIFcgPSBleHRlbnRbMF1bMF0sIHcwLCB3MSxcbiAgICAgICAgTiA9IGV4dGVudFswXVsxXSwgbjAsIG4xLFxuICAgICAgICBFID0gZXh0ZW50WzFdWzBdLCBlMCwgZTEsXG4gICAgICAgIFMgPSBleHRlbnRbMV1bMV0sIHMwLCBzMSxcbiAgICAgICAgZHggPSAwLFxuICAgICAgICBkeSA9IDAsXG4gICAgICAgIG1vdmluZyxcbiAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWSAmJiBrZXlzICYmIGV2ZW50LnNoaWZ0S2V5LFxuICAgICAgICBsb2NrWCxcbiAgICAgICAgbG9ja1ksXG4gICAgICAgIHBvaW50cyA9IEFycmF5LmZyb20oZXZlbnQudG91Y2hlcyB8fCBbZXZlbnRdLCB0ID0+IHtcbiAgICAgICAgICBjb25zdCBpID0gdC5pZGVudGlmaWVyO1xuICAgICAgICAgIHQgPSBwb2ludGVyKHQsIHRoYXQpO1xuICAgICAgICAgIHQucG9pbnQwID0gdC5zbGljZSgpO1xuICAgICAgICAgIHQuaWRlbnRpZmllciA9IGk7XG4gICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgIH0pO1xuXG4gICAgaW50ZXJydXB0KHRoYXQpO1xuICAgIHZhciBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmd1bWVudHMsIHRydWUpLmJlZm9yZXN0YXJ0KCk7XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvdmVybGF5XCIpIHtcbiAgICAgIGlmIChzZWxlY3Rpb24pIG1vdmluZyA9IHRydWU7XG4gICAgICBjb25zdCBwdHMgPSBbcG9pbnRzWzBdLCBwb2ludHNbMV0gfHwgcG9pbnRzWzBdXTtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtbXG4gICAgICAgICAgdzAgPSBkaW0gPT09IFkgPyBXIDogbWluKHB0c1swXVswXSwgcHRzWzFdWzBdKSxcbiAgICAgICAgICBuMCA9IGRpbSA9PT0gWCA/IE4gOiBtaW4ocHRzWzBdWzFdLCBwdHNbMV1bMV0pXG4gICAgICAgIF0sIFtcbiAgICAgICAgICBlMCA9IGRpbSA9PT0gWSA/IEUgOiBtYXgocHRzWzBdWzBdLCBwdHNbMV1bMF0pLFxuICAgICAgICAgIHMwID0gZGltID09PSBYID8gUyA6IG1heChwdHNbMF1bMV0sIHB0c1sxXVsxXSlcbiAgICAgICAgXV07XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDEpIG1vdmUoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3MCA9IHNlbGVjdGlvblswXVswXTtcbiAgICAgIG4wID0gc2VsZWN0aW9uWzBdWzFdO1xuICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XG4gICAgICBzMCA9IHNlbGVjdGlvblsxXVsxXTtcbiAgICB9XG5cbiAgICB3MSA9IHcwO1xuICAgIG4xID0gbjA7XG4gICAgZTEgPSBlMDtcbiAgICBzMSA9IHMwO1xuXG4gICAgdmFyIGdyb3VwID0gc2VsZWN0KHRoYXQpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xuXG4gICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICBlbWl0Lm1vdmVkID0gbW92ZWQ7XG4gICAgICBlbWl0LmVuZGVkID0gZW5kZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB2aWV3ID0gc2VsZWN0KGV2ZW50LnZpZXcpXG4gICAgICAgICAgLm9uKFwibW91c2Vtb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcIm1vdXNldXAuYnJ1c2hcIiwgZW5kZWQsIHRydWUpO1xuICAgICAgaWYgKGtleXMpIHZpZXdcbiAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcbiAgICAgICAgICAub24oXCJrZXl1cC5icnVzaFwiLCBrZXl1cHBlZCwgdHJ1ZSlcblxuICAgICAgZHJhZ0Rpc2FibGUoZXZlbnQudmlldyk7XG4gICAgfVxuXG4gICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgZW1pdC5zdGFydChldmVudCwgbW9kZS5uYW1lKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKGV2ZW50KSB7XG4gICAgICBmb3IgKGNvbnN0IHAgb2YgZXZlbnQuY2hhbmdlZFRvdWNoZXMgfHwgW2V2ZW50XSkge1xuICAgICAgICBmb3IgKGNvbnN0IGQgb2YgcG9pbnRzKVxuICAgICAgICAgIGlmIChkLmlkZW50aWZpZXIgPT09IHAuaWRlbnRpZmllcikgZC5jdXIgPSBwb2ludGVyKHAsIHRoYXQpO1xuICAgICAgfVxuICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kgJiYgcG9pbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1swXTtcbiAgICAgICAgaWYgKGFicyhwb2ludC5jdXJbMF0gLSBwb2ludFswXSkgPiBhYnMocG9pbnQuY3VyWzFdIC0gcG9pbnRbMV0pKVxuICAgICAgICAgIGxvY2tZID0gdHJ1ZTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGxvY2tYID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgcG9pbnQgb2YgcG9pbnRzKVxuICAgICAgICBpZiAocG9pbnQuY3VyKSBwb2ludFswXSA9IHBvaW50LmN1clswXSwgcG9pbnRbMV0gPSBwb2ludC5jdXJbMV07XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudChldmVudCk7XG4gICAgICBtb3ZlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3ZlKGV2ZW50KSB7XG4gICAgICBjb25zdCBwb2ludCA9IHBvaW50c1swXSwgcG9pbnQwID0gcG9pbnQucG9pbnQwO1xuICAgICAgdmFyIHQ7XG5cbiAgICAgIGR4ID0gcG9pbnRbMF0gLSBwb2ludDBbMF07XG4gICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xuXG4gICAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgICAgY2FzZSBNT0RFX1NQQUNFOlxuICAgICAgICBjYXNlIE1PREVfRFJBRzoge1xuICAgICAgICAgIGlmIChzaWduWCkgZHggPSBtYXgoVyAtIHcwLCBtaW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gbWF4KE4gLSBuMCwgbWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwICsgZHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBNT0RFX0hBTkRMRToge1xuICAgICAgICAgIGlmIChwb2ludHNbMV0pIHtcbiAgICAgICAgICAgIGlmIChzaWduWCkgdzEgPSBtYXgoVywgbWluKEUsIHBvaW50c1swXVswXSkpLCBlMSA9IG1heChXLCBtaW4oRSwgcG9pbnRzWzFdWzBdKSksIHNpZ25YID0gMTtcbiAgICAgICAgICAgIGlmIChzaWduWSkgbjEgPSBtYXgoTiwgbWluKFMsIHBvaW50c1swXVsxXSkpLCBzMSA9IG1heChOLCBtaW4oUywgcG9pbnRzWzFdWzFdKSksIHNpZ25ZID0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZHggPSBtYXgoVyAtIHcwLCBtaW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgICBlbHNlIGlmIChzaWduWCA+IDApIGR4ID0gbWF4KFcgLSBlMCwgbWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBtYXgoTiAtIG4wLCBtaW4oUyAtIG4wLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczA7XG4gICAgICAgICAgICBlbHNlIGlmIChzaWduWSA+IDApIGR5ID0gbWF4KE4gLSBzMCwgbWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE1PREVfQ0VOVEVSOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IG1heChXLCBtaW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gbWF4KFcsIG1pbihFLCBlMCArIGR4ICogc2lnblgpKTtcbiAgICAgICAgICBpZiAoc2lnblkpIG4xID0gbWF4KE4sIG1pbihTLCBuMCAtIGR5ICogc2lnblkpKSwgczEgPSBtYXgoTiwgbWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaChldmVudCwgbW9kZS5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRlZChldmVudCkge1xuICAgICAgbm9wcm9wYWdhdGlvbihldmVudCk7XG4gICAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgICBpZiAoZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgICAgICB0b3VjaGVuZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRvdWNoZW5kaW5nID0gbnVsbDsgfSwgNTAwKTsgLy8gR2hvc3QgY2xpY2tzIGFyZSBkZWxheWVkIVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ0VuYWJsZShldmVudC52aWV3LCBtb3ZpbmcpO1xuICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKTtcbiAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xuICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbikgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uOyAvLyBNYXkgYmUgc2V0IGJ5IGJydXNoLm1vdmUgKG9uIHN0YXJ0KSFcbiAgICAgIGlmIChlbXB0eShzZWxlY3Rpb24pKSBzdGF0ZS5zZWxlY3Rpb24gPSBudWxsLCByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgIGVtaXQuZW5kKGV2ZW50LCBtb2RlLm5hbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25lZChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFKSB7XG4gICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0U7IHRha2VzIHByaW9yaXR5IG92ZXIgQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfSEFORExFIHx8IG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xuICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMSAtIGR5OyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjEgLSBkeTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX1NQQUNFO1xuICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIG1vdmUoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBrZXl1cHBlZChldmVudCkge1xuICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMTY6IHsgLy8gU0hJRlRcbiAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcbiAgICAgICAgICAgIGxvY2tYID0gbG9ja1kgPSBzaGlmdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgbW92ZShldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICBtb3ZlKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRVxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX1NQQUNFKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuYWx0S2V5KSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xuICAgICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHNpZ25YIDwgMCkgZTAgPSBlMTsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxO1xuICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcbiAgICAgICAgICAgIG1vdmUoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKGV2ZW50KSB7XG4gICAgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLm1vdmVkKGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoZW5kZWQoZXZlbnQpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kZWQoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9fYnJ1c2ggfHwge3NlbGVjdGlvbjogbnVsbH07XG4gICAgc3RhdGUuZXh0ZW50ID0gbnVtYmVyMihleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgc3RhdGUuZGltID0gZGltO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIGJydXNoLmV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KG51bWJlcjIoXykpLCBicnVzaCkgOiBleHRlbnQ7XG4gIH07XG5cbiAgYnJ1c2guZmlsdGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgYnJ1c2gpIDogZmlsdGVyO1xuICB9O1xuXG4gIGJydXNoLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IHRvdWNoYWJsZTtcbiAgfTtcblxuICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGhhbmRsZVNpemUgPSArXywgYnJ1c2gpIDogaGFuZGxlU2l6ZTtcbiAgfTtcblxuICBicnVzaC5rZXlNb2RpZmllcnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9ICEhXywgYnJ1c2gpIDoga2V5cztcbiAgfTtcblxuICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiBicnVzaDtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuaW1wb3J0IG51bWJlckFycmF5LCB7aXNOdW1iZXJBcnJheX0gZnJvbSBcIi4vbnVtYmVyQXJyYXkuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gKGlzTnVtYmVyQXJyYXkoYikgPyBudW1iZXJBcnJheSA6IGdlbmVyaWNBcnJheSkoYSwgYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmljQXJyYXkoYSwgYikge1xuICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICB4ID0gbmV3IEFycmF5KG5hKSxcbiAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IHZhbHVlKGFbaV0sIGJbaV0pO1xuICBmb3IgKDsgaSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiID0gK2IsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKiAoMSAtIHQpICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGkgPSB7fSxcbiAgICAgIGMgPSB7fSxcbiAgICAgIGs7XG5cbiAgaWYgKGEgPT09IG51bGwgfHwgdHlwZW9mIGEgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgaWYgKGIgPT09IG51bGwgfHwgdHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIGIgPSB7fTtcblxuICBmb3IgKGsgaW4gYikge1xuICAgIGlmIChrIGluIGEpIHtcbiAgICAgIGlba10gPSB2YWx1ZShhW2tdLCBiW2tdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY1trXSA9IGJba107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIGlmICghYikgYiA9IFtdO1xuICB2YXIgbiA9IGEgPyBNYXRoLm1pbihiLmxlbmd0aCwgYS5sZW5ndGgpIDogMCxcbiAgICAgIGMgPSBiLnNsaWNlKCksXG4gICAgICBpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNbaV0gPSBhW2ldICogKDEgLSB0KSArIGJbaV0gKiB0O1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJBcnJheSh4KSB7XG4gIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoeCkgJiYgISh4IGluc3RhbmNlb2YgRGF0YVZpZXcpO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYi5qc1wiO1xuaW1wb3J0IHtnZW5lcmljQXJyYXl9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3QuanNcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5XG4gICAgICA6IEFycmF5LmlzQXJyYXkoYikgPyBnZW5lcmljQXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSAqICgxIC0gdCkgKyBiICogdCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBudW1iZXIoeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGlzTmFOKGIpID8gTmFOIDogMC41KTtcbn1cblxuZnVuY3Rpb24gY2xhbXBlcihhLCBiKSB7XG4gIHZhciB0O1xuICBpZiAoYSA+IGIpIHQgPSBhLCBhID0gYiwgYiA9IHQ7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCB4KSk7IH07XG59XG5cbi8vIG5vcm1hbGl6ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByYW5nZSB2YWx1ZSB4IGluIFthLGJdLlxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gbm9ybWFsaXplKGQxLCBkMCksIHIwID0gaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IG5vcm1hbGl6ZShkMCwgZDEpLCByMCA9IGludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBub3JtYWxpemUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpO1xuICAgIGlmIChjbGFtcCAhPT0gaWRlbnRpdHkpIGNsYW1wID0gY2xhbXBlcihkb21haW5bMF0sIGRvbWFpbltuIC0gMV0pO1xuICAgIHBpZWNld2lzZSA9IG4gPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIHggPT0gbnVsbCB8fCBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4ubWFwKHRyYW5zZm9ybSksIHJhbmdlLCBpbnRlcnBvbGF0ZSkpKSh0cmFuc2Zvcm0oY2xhbXAoeCkpKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gY2xhbXAodW50cmFuc2Zvcm0oKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCBpbnRlcnBvbGF0ZU51bWJlcikpKSh5KSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBBcnJheS5mcm9tKF8sIG51bWJlciksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IEFycmF5LmZyb20oXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlUm91bmQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIHJhbmdlID0gQXJyYXkuZnJvbShfKSwgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVJvdW5kLCByZXNjYWxlKCk7XG4gIH07XG5cbiAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSBfID8gdHJ1ZSA6IGlkZW50aXR5LCByZXNjYWxlKCkpIDogY2xhbXAgIT09IGlkZW50aXR5O1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgcmVzY2FsZSgpKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQsIHUpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB1bnRyYW5zZm9ybSA9IHU7XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGludW91cygpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKCkoaWRlbnRpdHksIGlkZW50aXR5KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnN0YW50cyh4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpbml0UmFuZ2UoZG9tYWluLCByYW5nZSkge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5yYW5nZShkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLnJhbmdlKHJhbmdlKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0SW50ZXJwb2xhdG9yKGRvbWFpbiwgaW50ZXJwb2xhdG9yKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB7XG4gICAgICBpZiAodHlwZW9mIGRvbWFpbiA9PT0gXCJmdW5jdGlvblwiKSB0aGlzLmludGVycG9sYXRvcihkb21haW4pO1xuICAgICAgZWxzZSB0aGlzLnJhbmdlKGRvbWFpbik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhpcy5kb21haW4oZG9tYWluKTtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJwb2xhdG9yID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuaW50ZXJwb2xhdG9yKGludGVycG9sYXRvcik7XG4gICAgICBlbHNlIHRoaXMucmFuZ2UoaW50ZXJwb2xhdG9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsIi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bfl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC0oIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG4gIHZhciBtYXRjaDtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoe1xuICAgIGZpbGw6IG1hdGNoWzFdLFxuICAgIGFsaWduOiBtYXRjaFsyXSxcbiAgICBzaWduOiBtYXRjaFszXSxcbiAgICBzeW1ib2w6IG1hdGNoWzRdLFxuICAgIHplcm86IG1hdGNoWzVdLFxuICAgIHdpZHRoOiBtYXRjaFs2XSxcbiAgICBjb21tYTogbWF0Y2hbN10sXG4gICAgcHJlY2lzaW9uOiBtYXRjaFs4XSAmJiBtYXRjaFs4XS5zbGljZSgxKSxcbiAgICB0cmltOiBtYXRjaFs5XSxcbiAgICB0eXBlOiBtYXRjaFsxMF1cbiAgfSk7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmV4cG9ydCBmdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHRoaXMuZmlsbCA9IHNwZWNpZmllci5maWxsID09PSB1bmRlZmluZWQgPyBcIiBcIiA6IHNwZWNpZmllci5maWxsICsgXCJcIjtcbiAgdGhpcy5hbGlnbiA9IHNwZWNpZmllci5hbGlnbiA9PT0gdW5kZWZpbmVkID8gXCI+XCIgOiBzcGVjaWZpZXIuYWxpZ24gKyBcIlwiO1xuICB0aGlzLnNpZ24gPSBzcGVjaWZpZXIuc2lnbiA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBzcGVjaWZpZXIuc2lnbiArIFwiXCI7XG4gIHRoaXMuc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci5zeW1ib2wgKyBcIlwiO1xuICB0aGlzLnplcm8gPSAhIXNwZWNpZmllci56ZXJvO1xuICB0aGlzLndpZHRoID0gc3BlY2lmaWVyLndpZHRoID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLndpZHRoO1xuICB0aGlzLmNvbW1hID0gISFzcGVjaWZpZXIuY29tbWE7XG4gIHRoaXMucHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci5wcmVjaXNpb247XG4gIHRoaXMudHJpbSA9ICEhc3BlY2lmaWVyLnRyaW07XG4gIHRoaXMudHlwZSA9IHNwZWNpZmllci50eXBlID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnR5cGUgKyBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXSxcbiAgICAgIGkgPSBleHBvbmVudCAtIChwcmVmaXhFeHBvbmVudCA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50IC8gMykpKSAqIDMpICsgMSxcbiAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XG4gIHJldHVybiBpID09PSBuID8gY29lZmZpY2llbnRcbiAgICAgIDogaSA+IG4gPyBjb2VmZmljaWVudCArIG5ldyBBcnJheShpIC0gbiArIDEpLmpvaW4oXCIwXCIpXG4gICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXG4gICAgICA6IFwiMC5cIiArIG5ldyBBcnJheSgxIC0gaSkuam9pbihcIjBcIikgKyBmb3JtYXREZWNpbWFsUGFydHMoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIE1hdGguYWJzKHggPSBNYXRoLnJvdW5kKHgpKSA+PSAxZTIxXG4gICAgICA/IHgudG9Mb2NhbGVTdHJpbmcoXCJlblwiKS5yZXBsYWNlKC8sL2csIFwiXCIpXG4gICAgICA6IHgudG9TdHJpbmcoMTApO1xufVxuXG4vLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsUGFydHMoMS4yMykgcmV0dXJucyBbXCIxMjNcIiwgMF0uXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbFBhcnRzKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCJpbXBvcnQge2Zvcm1hdERlY2ltYWxQYXJ0c30gZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbFBhcnRzKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiJVwiOiAoeCwgcCkgPT4gKHggKiAxMDApLnRvRml4ZWQocCksXG4gIFwiYlwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygyKSxcbiAgXCJjXCI6ICh4KSA9PiB4ICsgXCJcIixcbiAgXCJkXCI6IGZvcm1hdERlY2ltYWwsXG4gIFwiZVwiOiAoeCwgcCkgPT4geC50b0V4cG9uZW50aWFsKHApLFxuICBcImZcIjogKHgsIHApID0+IHgudG9GaXhlZChwKSxcbiAgXCJnXCI6ICh4LCBwKSA9PiB4LnRvUHJlY2lzaW9uKHApLFxuICBcIm9cIjogKHgpID0+IE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCksXG4gIFwicFwiOiAoeCwgcCkgPT4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogKHgpID0+IE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCksXG4gIFwieFwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNilcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXAuanNcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFscy5qc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXIuanNcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW0uanNcIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlcy5qc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbnZhciBtYXAgPSBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyA9PT0gdW5kZWZpbmVkIHx8IGxvY2FsZS50aG91c2FuZHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0R3JvdXAobWFwLmNhbGwobG9jYWxlLmdyb3VwaW5nLCBOdW1iZXIpLCBsb2NhbGUudGhvdXNhbmRzICsgXCJcIiksXG4gICAgICBjdXJyZW5jeVByZWZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVswXSArIFwiXCIsXG4gICAgICBjdXJyZW5jeVN1ZmZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVsxXSArIFwiXCIsXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwgPT09IHVuZGVmaW5lZCA/IFwiLlwiIDogbG9jYWxlLmRlY2ltYWwgKyBcIlwiLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0TnVtZXJhbHMobWFwLmNhbGwobG9jYWxlLm51bWVyYWxzLCBTdHJpbmcpKSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCA9PT0gdW5kZWZpbmVkID8gXCIlXCIgOiBsb2NhbGUucGVyY2VudCArIFwiXCIsXG4gICAgICBtaW51cyA9IGxvY2FsZS5taW51cyA9PT0gdW5kZWZpbmVkID8gXCLiiJJcIiA6IGxvY2FsZS5taW51cyArIFwiXCIsXG4gICAgICBuYW4gPSBsb2NhbGUubmFuID09PSB1bmRlZmluZWQgPyBcIk5hTlwiIDogbG9jYWxlLm5hbiArIFwiXCI7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllcikge1xuICAgIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xuXG4gICAgdmFyIGZpbGwgPSBzcGVjaWZpZXIuZmlsbCxcbiAgICAgICAgYWxpZ24gPSBzcGVjaWZpZXIuYWxpZ24sXG4gICAgICAgIHNpZ24gPSBzcGVjaWZpZXIuc2lnbixcbiAgICAgICAgc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCxcbiAgICAgICAgemVybyA9IHNwZWNpZmllci56ZXJvLFxuICAgICAgICB3aWR0aCA9IHNwZWNpZmllci53aWR0aCxcbiAgICAgICAgY29tbWEgPSBzcGVjaWZpZXIuY29tbWEsXG4gICAgICAgIHByZWNpc2lvbiA9IHNwZWNpZmllci5wcmVjaXNpb24sXG4gICAgICAgIHRyaW0gPSBzcGVjaWZpZXIudHJpbSxcbiAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xuXG4gICAgLy8gVGhlIFwiblwiIHR5cGUgaXMgYW4gYWxpYXMgZm9yIFwiLGdcIi5cbiAgICBpZiAodHlwZSA9PT0gXCJuXCIpIGNvbW1hID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gVGhlIFwiXCIgdHlwZSwgYW5kIGFueSBpbnZhbGlkIHR5cGUsIGlzIGFuIGFsaWFzIGZvciBcIi4xMn5nXCIuXG4gICAgZWxzZSBpZiAoIWZvcm1hdFR5cGVzW3R5cGVdKSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCAmJiAocHJlY2lzaW9uID0gMTIpLCB0cmltID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xuXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXG4gICAgaWYgKHplcm8gfHwgKGZpbGwgPT09IFwiMFwiICYmIGFsaWduID09PSBcIj1cIikpIHplcm8gPSB0cnVlLCBmaWxsID0gXCIwXCIsIGFsaWduID0gXCI9XCI7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAvLyBGb3IgU0ktcHJlZml4LCB0aGUgc3VmZml4IGlzIGxhemlseSBjb21wdXRlZC5cbiAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5UHJlZml4IDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxuICAgICAgICBzdWZmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lTdWZmaXggOiAvWyVwXS8udGVzdCh0eXBlKSA/IHBlcmNlbnQgOiBcIlwiO1xuXG4gICAgLy8gV2hhdCBmb3JtYXQgZnVuY3Rpb24gc2hvdWxkIHdlIHVzZT9cbiAgICAvLyBJcyB0aGlzIGFuIGludGVnZXIgdHlwZT9cbiAgICAvLyBDYW4gdGhpcyB0eXBlIGdlbmVyYXRlIGV4cG9uZW50aWFsIG5vdGF0aW9uP1xuICAgIHZhciBmb3JtYXRUeXBlID0gZm9ybWF0VHlwZXNbdHlwZV0sXG4gICAgICAgIG1heWJlU3VmZml4ID0gL1tkZWZncHJzJV0vLnRlc3QodHlwZSk7XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXG4gICAgLy8gb3IgY2xhbXAgdGhlIHNwZWNpZmllZCBwcmVjaXNpb24gdG8gdGhlIHN1cHBvcnRlZCByYW5nZS5cbiAgICAvLyBGb3Igc2lnbmlmaWNhbnQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFsxLCAyMV0uXG4gICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxuICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gNlxuICAgICAgICA6IC9bZ3Byc10vLnRlc3QodHlwZSkgPyBNYXRoLm1heCgxLCBNYXRoLm1pbigyMSwgcHJlY2lzaW9uKSlcbiAgICAgICAgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigyMCwgcHJlY2lzaW9uKSk7XG5cbiAgICBmdW5jdGlvbiBmb3JtYXQodmFsdWUpIHtcbiAgICAgIHZhciB2YWx1ZVByZWZpeCA9IHByZWZpeCxcbiAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IHN1ZmZpeCxcbiAgICAgICAgICBpLCBuLCBjO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJjXCIpIHtcbiAgICAgICAgdmFsdWVTdWZmaXggPSBmb3JtYXRUeXBlKHZhbHVlKSArIHZhbHVlU3VmZml4O1xuICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9ICt2YWx1ZTtcblxuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIHNpZ24uIC0wIGlzIG5vdCBsZXNzIHRoYW4gMCwgYnV0IDEgLyAtMCBpcyFcbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDAgfHwgMSAvIHZhbHVlIDwgMDtcblxuICAgICAgICAvLyBQZXJmb3JtIHRoZSBpbml0aWFsIGZvcm1hdHRpbmcuXG4gICAgICAgIHZhbHVlID0gaXNOYU4odmFsdWUpID8gbmFuIDogZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGFmdGVyIGZvcm1hdHRpbmcsIGFuZCBubyBleHBsaWNpdCBwb3NpdGl2ZSBzaWduIGlzIHJlcXVlc3RlZCwgaGlkZSB0aGUgc2lnbi5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwICYmIHNpZ24gIT09IFwiK1wiKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogbWludXMpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgdmFsdWVTdWZmaXggPSAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgdmFsdWVTdWZmaXggKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgLy8gQnJlYWsgdGhlIGZvcm1hdHRlZCB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIOKAnHZhbHVl4oCdIHBhcnQgdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gKGMgPT09IDQ2ID8gZGVjaW1hbCArIHZhbHVlLnNsaWNlKGkgKyAxKSA6IHZhbHVlLnNsaWNlKGkpKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYWRkaW5nLlxuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGFmdGVyIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSBcIjxcIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nOyBicmVhaztcbiAgICAgICAgY2FzZSBcIj1cIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgICAgY2FzZSBcIl5cIjogdmFsdWUgPSBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdmFsdWUgPSBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWVyYWxzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICBlID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1s4ICsgZSAvIDNdO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICB9O1xufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICB0aG91c2FuZHM6IFwiLFwiLFxuICBncm91cGluZzogWzNdLFxuICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIGZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIGZvcm1hdFByZWZpeCA9IGxvY2FsZS5mb3JtYXRQcmVmaXg7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBjb250aW51b3VzLCB7Y29weX0gZnJvbSBcIi4vY29udGludW91cy5qc1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXQuanNcIjtcbmltcG9ydCB0aWNrRm9ybWF0IGZyb20gXCIuL3RpY2tGb3JtYXQuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVhcmlzaChzY2FsZSkge1xuICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrcyhkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KTtcbiAgfTtcblxuICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tGb3JtYXQoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCwgc3BlY2lmaWVyKTtcbiAgfTtcblxuICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gbnVsbCkgY291bnQgPSAxMDtcblxuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgdmFyIGkwID0gMDtcbiAgICB2YXIgaTEgPSBkLmxlbmd0aCAtIDE7XG4gICAgdmFyIHN0YXJ0ID0gZFtpMF07XG4gICAgdmFyIHN0b3AgPSBkW2kxXTtcbiAgICB2YXIgcHJlc3RlcDtcbiAgICB2YXIgc3RlcDtcbiAgICB2YXIgbWF4SXRlciA9IDEwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuICAgIFxuICAgIHdoaWxlIChtYXhJdGVyLS0gPiAwKSB7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgICAgaWYgKHN0ZXAgPT09IHByZXN0ZXApIHtcbiAgICAgICAgZFtpMF0gPSBzdGFydFxuICAgICAgICBkW2kxXSA9IHN0b3BcbiAgICAgICAgcmV0dXJuIGRvbWFpbihkKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RlcCA+IDApIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwcmVzdGVwID0gc3RlcDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaW5lYXIoKSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxpbmVhcigpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCJpbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7Zm9ybWF0LCBmb3JtYXRQcmVmaXgsIGZvcm1hdFNwZWNpZmllciwgcHJlY2lzaW9uRml4ZWQsIHByZWNpc2lvblByZWZpeCwgcHJlY2lzaW9uUm91bmR9IGZyb20gXCJkMy1mb3JtYXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGlja0Zvcm1hdChzdGFydCwgc3RvcCwgY291bnQsIHNwZWNpZmllcikge1xuICB2YXIgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCksXG4gICAgICBwcmVjaXNpb247XG4gIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIgPT0gbnVsbCA/IFwiLGZcIiA6IHNwZWNpZmllcik7XG4gIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcbiAgICBjYXNlIFwic1wiOiB7XG4gICAgICB2YXIgdmFsdWUgPSBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKTtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuICAgICAgcmV0dXJuIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcbiAgICB9XG4gICAgY2FzZSBcIlwiOlxuICAgIGNhc2UgXCJlXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblJvdW5kKHN0ZXAsIE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiZVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZlwiOlxuICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0KHNwZWNpZmllcik7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzIC0gZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCBtYXgpIHtcbiAgc3RlcCA9IE1hdGguYWJzKHN0ZXApLCBtYXggPSBNYXRoLmFicyhtYXgpIC0gc3RlcDtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGV4cG9uZW50KG1heCkgLSBleHBvbmVudChzdGVwKSkgKyAxO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIFRyYW5zZm9ybShrLCB4LCB5KSB7XG4gIHRoaXMuayA9IGs7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm0sXG4gIHNjYWxlOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIGsgPT09IDEgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmsgKiBrLCB0aGlzLngsIHRoaXMueSk7XG4gIH0sXG4gIHRyYW5zbGF0ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB4ID09PSAwICYgeSA9PT0gMCA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuaywgdGhpcy54ICsgdGhpcy5rICogeCwgdGhpcy55ICsgdGhpcy5rICogeSk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBbcG9pbnRbMF0gKiB0aGlzLmsgKyB0aGlzLngsIHBvaW50WzFdICogdGhpcy5rICsgdGhpcy55XTtcbiAgfSxcbiAgYXBwbHlYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggKiB0aGlzLmsgKyB0aGlzLng7XG4gIH0sXG4gIGFwcGx5WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5ICogdGhpcy5rICsgdGhpcy55O1xuICB9LFxuICBpbnZlcnQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIFsobG9jYXRpb25bMF0gLSB0aGlzLngpIC8gdGhpcy5rLCAobG9jYXRpb25bMV0gLSB0aGlzLnkpIC8gdGhpcy5rXTtcbiAgfSxcbiAgaW52ZXJ0WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAoeCAtIHRoaXMueCkgLyB0aGlzLms7XG4gIH0sXG4gIGludmVydFk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKHkgLSB0aGlzLnkpIC8gdGhpcy5rO1xuICB9LFxuICByZXNjYWxlWDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4LmNvcHkoKS5kb21haW4oeC5yYW5nZSgpLm1hcCh0aGlzLmludmVydFgsIHRoaXMpLm1hcCh4LmludmVydCwgeCkpO1xuICB9LFxuICByZXNjYWxlWTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5LmNvcHkoKS5kb21haW4oeS5yYW5nZSgpLm1hcCh0aGlzLmludmVydFksIHRoaXMpLm1hcCh5LmludmVydCwgeSkpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdGhpcy54ICsgXCIsXCIgKyB0aGlzLnkgKyBcIikgc2NhbGUoXCIgKyB0aGlzLmsgKyBcIilcIjtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IG5ldyBUcmFuc2Zvcm0oMSwgMCwgMCk7XG5cbnRyYW5zZm9ybS5wcm90b3R5cGUgPSBUcmFuc2Zvcm0ucHJvdG90eXBlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm0obm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX196b29tKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuIGlkZW50aXR5O1xuICByZXR1cm4gbm9kZS5fX3pvb207XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obnVtZXJhbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1swLTldL2csIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBudW1lcmFsc1sraV07XG4gICAgfSk7XG4gIH07XG59XG4iLCIvLyBUcmltcyBpbnNpZ25pZmljYW50IHplcm9zLCBlLmcuLCByZXBsYWNlcyAxLjIwMDBrIHdpdGggMS4yay5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHMpIHtcbiAgb3V0OiBmb3IgKHZhciBuID0gcy5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgIHN3aXRjaCAoc1tpXSkge1xuICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGlmIChpMCA+IDApIGkwID0gMDsgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMCA+IDAgPyBzLnNsaWNlKDAsIGkwKSArIHMuc2xpY2UoaTEgKyAxKSA6IHM7XG59XG4iLCJpbXBvcnQgeyBDb3VudHJ5IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgbWFwQ291bnRyeUNvZGUgPSAoY29kZTogQ291bnRyeSkgPT4ge1xuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICBjYXNlICdFTCc6XG4gICAgICByZXR1cm4gJ2dyJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGNvZGUudG9Mb3dlckNhc2UoKTtcbiAgfVxufTtcbiIsImltcG9ydCB7IERhdGFJdGVtLCBNT0RFLCBQYWxldHRlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBTQU1QTEVfREFUQSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCAqIGFzIENoYXJ0IGZyb20gJy4vY2hhcnRzL2luZGV4JztcblxuY2xhc3MgUGFnZSB7XG4gIHBhbGV0dGVTZWxlY3Q6IEhUTUxTZWxlY3RFbGVtZW50O1xuICBtb2RlU2VsZWN0OiBIVE1MU2VsZWN0RWxlbWVudDtcbiAgc2VsZWN0RGF0YUlucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuICBzZWxlY3REYXRhQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgZG93bmxvYWRDaGFydEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gIGRvd25sb2FkQ2hhcnRMaW5rOiBIVE1MQW5jaG9yRWxlbWVudDtcbiAgbWFwU3ZnOiBTVkdFbGVtZW50O1xuICBkYXRhOiBEYXRhSXRlbVtdID0gU0FNUExFX0RBVEE7XG5cbiAgb25QYWxldHRlQ2hhbmdlID0gKCkgPT4ge1xuICAgIHRoaXMucmVkcmF3Q2hhcnQoKTtcbiAgfTtcblxuICBvbk1vZGVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgdGhpcy5yZWRyYXdDaGFydCgpO1xuICB9O1xuXG4gIG9uU2VsZWN0RGF0YSA9ICgpID0+IHtcbiAgICB0aGlzLnNlbGVjdERhdGFJbnB1dC5jbGljaygpO1xuICB9O1xuXG4gIG9uRGF0YUNoYW5nZSA9IGFzeW5jIChlOiBFdmVudCkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcblxuICAgIGlmIChpbnB1dC5maWxlcykge1xuICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGlucHV0LmZpbGVzWzBdKTtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSB0aGlzLm9uRGF0YUxvYWRlZDtcbiAgICB9XG4gIH07XG5cbiAgb25EYXRhTG9hZGVkID0gKGU6IFByb2dyZXNzRXZlbnQ8RmlsZVJlYWRlcj4pID0+IHtcbiAgICBjb25zdCBjc3YgPSBTdHJpbmcoZS50YXJnZXQucmVzdWx0KTtcbiAgICBjb25zdCByb3dzID0gY3N2LnNwbGl0KCdcXG4nKS5tYXAoKHJvdykgPT4gKHtcbiAgICAgIGNvdW50cnk6IHJvdy5zbGljZSgwLCAyKSxcbiAgICAgIHZhbHVlOiBOdW1iZXIucGFyc2VGbG9hdChcbiAgICAgICAgcm93LnNsaWNlKDMpLnJlcGxhY2UoL1xcXCIvZywgJycpLnJlcGxhY2UoJywnLCAnLicpXG4gICAgICApLFxuICAgIH0pKSBhcyBEYXRhSXRlbVtdO1xuICAgIHRoaXMuZGF0YSA9IHJvd3M7XG4gICAgdGhpcy5yZWRyYXdDaGFydCgpO1xuICB9O1xuXG4gIG9uRG93bmxvYWRDaGFydCA9ICgpID0+IHtcbiAgICBjb25zdCBkYXRhID0gbmV3IEJsb2IoW3RoaXMubWFwU3ZnLm91dGVySFRNTF0pO1xuICAgIHRoaXMuZG93bmxvYWRDaGFydExpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZGF0YSk7XG4gICAgdGhpcy5kb3dubG9hZENoYXJ0TGluay5jbGljaygpO1xuICB9O1xuXG4gIHJlZHJhd0NoYXJ0ID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmRhdGEubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBjb25zdCBwYWxldHRlID0gdGhpcy5wYWxldHRlU2VsZWN0LnZhbHVlIGFzIFBhbGV0dGU7XG4gICAgY29uc3QgbW9kZSA9IHRoaXMubW9kZVNlbGVjdC52YWx1ZSBhcyBNT0RFO1xuXG4gICAgaWYgKG1vZGUgPT0gTU9ERS5CaW5zKSB7XG4gICAgICBDaGFydC5kcmF3Qmlucyh0aGlzLm1hcFN2ZywgdGhpcy5kYXRhLCBwYWxldHRlKTtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09IE1PREUuQ29udGlub3VzKSB7XG4gICAgICBDaGFydC5kcmF3Q29udGlub3VzKHRoaXMubWFwU3ZnLCB0aGlzLmRhdGEsIHBhbGV0dGUpO1xuICAgIH1cbiAgfTtcblxuICBpbml0RWxlbWVudHMgPSAoKSA9PiB7XG4gICAgdGhpcy5zZWxlY3REYXRhSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXBsb2FkLWRhdGEtaW5wdXQnKTtcbiAgICB0aGlzLnNlbGVjdERhdGFCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdXBsb2FkLWRhdGEtYnV0dG9uJyk7XG4gICAgdGhpcy5kb3dubG9hZENoYXJ0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Rvd25sb2FkLWNoYXJ0LWJ1dHRvbicpO1xuICAgIHRoaXMuZG93bmxvYWRDaGFydExpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZG93bmxvYWQtY2hhcnQtbGluaycpO1xuICAgIHRoaXMucGFsZXR0ZVNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwYWxldHRlLXNlbGVjdCcpO1xuICAgIHRoaXMubW9kZVNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtb2RlLXNlbGVjdCcpO1xuICAgIHRoaXMubWFwU3ZnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2V1LW1hcCcpO1xuICB9O1xuXG4gIGluaXRMaXN0ZW5lcnMgPSAoKSA9PiB7XG4gICAgdGhpcy5zZWxlY3REYXRhQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vblNlbGVjdERhdGEpO1xuICAgIHRoaXMuc2VsZWN0RGF0YUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMub25EYXRhQ2hhbmdlKTtcbiAgICB0aGlzLmRvd25sb2FkQ2hhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uRG93bmxvYWRDaGFydCk7XG4gICAgdGhpcy5wYWxldHRlU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vblBhbGV0dGVDaGFuZ2UpO1xuICAgIHRoaXMubW9kZVNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25Nb2RlQ2hhbmdlKTtcbiAgfTtcbn1cblxuY29uc3QgbWFpbiA9ICgpID0+IHtcbiAgY29uc3QgcGFnZSA9IG5ldyBQYWdlKCk7XG4gIHBhZ2UuaW5pdEVsZW1lbnRzKCk7XG4gIHBhZ2UuaW5pdExpc3RlbmVycygpO1xuICBwYWdlLnJlZHJhd0NoYXJ0KCk7XG59O1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICBtYWluKCk7XG59KTtcbiIsImltcG9ydCB7IENvdW50cnksIERhdGFJdGVtLCBQYWxldHRlLCBQQUxFVFRFUyB9IGZyb20gJy4uL3R5cGVzJztcclxuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuaW1wb3J0ICogYXMgRDMgZnJvbSAnZDMnO1xyXG5pbXBvcnQgKiBhcyBIZWxwZXJzIGZyb20gJy4vaGVscGVycyc7XHJcblxyXG5jb25zdCBDT05GSUcgPSB7XHJcbiAgeE9mZnNldDogODIsXHJcbiAgeU9mZnNldDogNSxcclxuICBmb250U2l6ZTogJzNweCcsXHJcbiAgZm9udFNpemVUaXRsZTogJzRweCcsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZHJhd0JpbnMgPSAoXHJcbiAgbWFwU3ZnOiBTVkdFbGVtZW50LFxyXG4gIGRhdGE6IERhdGFJdGVtW10sXHJcbiAgcGFsZXR0ZTogUGFsZXR0ZVxyXG4pID0+IHtcclxuICBjb25zdCBiaW4gPSBEMy5iaW4oKS52YWx1ZSgoZDogYW55KSA9PiBkLnZhbHVlKTtcclxuICBjb25zdCBiaW5zID0gYmluKGRhdGEgYXMgYW55KTtcclxuXHJcbiAgY29uc3Qgc2NhbGUgPSBEMy5zY2FsZUxpbmVhcigpXHJcbiAgICAuZG9tYWluKFswLCBiaW5zLmxlbmd0aF0pXHJcbiAgICAucmFuZ2UoUEFMRVRURVNbcGFsZXR0ZV0gYXMgYW55KTtcclxuXHJcbiAgYmlucy5mb3JFYWNoKChiaW4sIGkpID0+IHtcclxuICAgIGNvbnN0IGNvbG9yID0gc2NhbGUoaSk7XHJcblxyXG4gICAgYmluLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgY29uc3QgY29kZSA9IChpdGVtIGFzIGFueSkuY291bnRyeSBhcyBDb3VudHJ5O1xyXG4gICAgICBjb25zdCBjb3VudHJ5ID0gSGVscGVycy5tYXBDb3VudHJ5Q29kZShjb2RlKTtcclxuICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2NvdW50cnl9YCkgYXMgU1ZHUGF0aEVsZW1lbnQ7XHJcbiAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS5maWxsID0gU3RyaW5nKGNvbG9yKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIEQzLnNlbGVjdChtYXBTdmcpLnNlbGVjdEFsbCgncGF0aCcpLnN0eWxlKCdzdHJva2UnLCBDT0xPUlMuQm9yZGVycyk7XHJcblxyXG4gIGNvbnN0IGxlZ2VuZERhdGEgPSBbbnVsbCwgLi4uYmluc107XHJcbiAgY29uc3QgbGVnZW5kID0gRDMuc2VsZWN0KG1hcFN2Zykuc2VsZWN0KCcjY2hhcnQtbGVnZW5kJyk7XHJcblxyXG4gIGxlZ2VuZC5zZWxlY3RBbGwoJyonKS5yZW1vdmUoKTtcclxuXHJcbiAgbGVnZW5kXHJcbiAgICAuYXBwZW5kKCd0ZXh0JylcclxuICAgIC50ZXh0KCdMZWdlbmRhOicpXHJcbiAgICAuYXR0cigneCcsIENPTkZJRy54T2Zmc2V0ICsgNSlcclxuICAgIC5hdHRyKCd5JywgQ09ORklHLnlPZmZzZXQgKyA0KVxyXG4gICAgLnN0eWxlKCdmb250LXNpemUnLCBDT05GSUcuZm9udFNpemVUaXRsZSk7XHJcblxyXG4gIGNvbnN0IGcgPSBsZWdlbmQuc2VsZWN0QWxsKCdpdGVtJykuZGF0YShsZWdlbmREYXRhKS5lbnRlcigpLmFwcGVuZCgnZycpO1xyXG5cclxuICBnLmFwcGVuZCgncmVjdCcpXHJcbiAgICAuYXR0cigneCcsIENPTkZJRy54T2Zmc2V0ICsgNSlcclxuICAgIC5hdHRyKCd5JywgKF8sIGkpID0+IENPTkZJRy55T2Zmc2V0ICsgKGkgKyAxKSAqIDYpXHJcbiAgICAuYXR0cignd2lkdGgnLCA1KVxyXG4gICAgLmF0dHIoJ2hlaWdodCcsIDUpXHJcbiAgICAuYXR0cignZmlsbCcsIChpdGVtLCBpKSA9PiAoaXRlbSA/IHNjYWxlKGkpIDogQ09MT1JTLk5vRGF0YSkpXHJcbiAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIDAuMSlcclxuICAgIC5zdHlsZSgnc3Ryb2tlJywgJyM1NTUnKTtcclxuXHJcbiAgZy5hcHBlbmQoJ3RleHQnKVxyXG4gICAgLmF0dHIoJ3gnLCBDT05GSUcueE9mZnNldCArIDExKVxyXG4gICAgLmF0dHIoJ3knLCAoXywgaSkgPT4gQ09ORklHLnlPZmZzZXQgKyAoaSArIDEpICogNiArIDMuNSlcclxuICAgIC5zdHlsZSgnZm9udC1zaXplJywgQ09ORklHLmZvbnRTaXplKVxyXG4gICAgLnRleHQoKGl0ZW0pID0+IChpdGVtID8gYCR7aXRlbS54MH0gLSAke2l0ZW0ueDF9YCA6ICdEw6F0YSBuZWRvc3R1cG7DqScpKTtcclxufTtcclxuIiwiaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXkuanNcIjtcbmltcG9ydCBiaXNlY3QgZnJvbSBcIi4vYmlzZWN0LmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBleHRlbnQgZnJvbSBcIi4vZXh0ZW50LmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcbmltcG9ydCBuaWNlIGZyb20gXCIuL25pY2UuanNcIjtcbmltcG9ydCB0aWNrcywge3RpY2tJbmNyZW1lbnR9IGZyb20gXCIuL3RpY2tzLmpzXCI7XG5pbXBvcnQgc3R1cmdlcyBmcm9tIFwiLi90aHJlc2hvbGQvc3R1cmdlcy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW4oKSB7XG4gIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgZG9tYWluID0gZXh0ZW50LFxuICAgICAgdGhyZXNob2xkID0gc3R1cmdlcztcblxuICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSkgZGF0YSA9IEFycmF5LmZyb20oZGF0YSk7XG5cbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICB4LFxuICAgICAgICBzdGVwLFxuICAgICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YWx1ZXNbaV0gPSB2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICB9XG5cbiAgICB2YXIgeHogPSBkb21haW4odmFsdWVzKSxcbiAgICAgICAgeDAgPSB4elswXSxcbiAgICAgICAgeDEgPSB4elsxXSxcbiAgICAgICAgdHogPSB0aHJlc2hvbGQodmFsdWVzLCB4MCwgeDEpO1xuXG4gICAgLy8gQ29udmVydCBudW1iZXIgb2YgdGhyZXNob2xkcyBpbnRvIHVuaWZvcm0gdGhyZXNob2xkcywgYW5kIG5pY2UgdGhlXG4gICAgLy8gZGVmYXVsdCBkb21haW4gYWNjb3JkaW5nbHkuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkge1xuICAgICAgY29uc3QgbWF4ID0geDEsIHRuID0gK3R6O1xuICAgICAgaWYgKGRvbWFpbiA9PT0gZXh0ZW50KSBbeDAsIHgxXSA9IG5pY2UoeDAsIHgxLCB0bik7XG4gICAgICB0eiA9IHRpY2tzKHgwLCB4MSwgdG4pO1xuXG4gICAgICAvLyBJZiB0aGUgZG9tYWluIGlzIGFsaWduZWQgd2l0aCB0aGUgZmlyc3QgdGljayAod2hpY2ggaXQgd2lsbCBieVxuICAgICAgLy8gZGVmYXVsdCksIHRoZW4gd2UgY2FuIHVzZSBxdWFudGl6YXRpb24gcmF0aGVyIHRoYW4gYmlzZWN0aW9uIHRvIGJpblxuICAgICAgLy8gdmFsdWVzLCB3aGljaCBpcyBzdWJzdGFudGlhbGx5IGZhc3Rlci5cbiAgICAgIGlmICh0elswXSA8PSB4MCkgc3RlcCA9IHRpY2tJbmNyZW1lbnQoeDAsIHgxLCB0bik7XG5cbiAgICAgIC8vIElmIHRoZSBsYXN0IHRocmVzaG9sZCBpcyBjb2luY2lkZW50IHdpdGggdGhlIGRvbWFpbuKAmXMgdXBwZXIgYm91bmQsIHRoZVxuICAgICAgLy8gbGFzdCBiaW4gd2lsbCBiZSB6ZXJvLXdpZHRoLiBJZiB0aGUgZGVmYXVsdCBkb21haW4gaXMgdXNlZCwgYW5kIHRoaXNcbiAgICAgIC8vIGxhc3QgdGhyZXNob2xkIGlzIGNvaW5jaWRlbnQgd2l0aCB0aGUgbWF4aW11bSBpbnB1dCB2YWx1ZSwgd2UgY2FuXG4gICAgICAvLyBleHRlbmQgdGhlIG5pY2VkIHVwcGVyIGJvdW5kIGJ5IG9uZSB0aWNrIHRvIGVuc3VyZSB1bmlmb3JtIGJpbiB3aWR0aHM7XG4gICAgICAvLyBvdGhlcndpc2UsIHdlIHNpbXBseSByZW1vdmUgdGhlIGxhc3QgdGhyZXNob2xkLiBOb3RlIHRoYXQgd2UgZG9u4oCZdFxuICAgICAgLy8gY29lcmNlIHZhbHVlcyBvciB0aGUgZG9tYWluIHRvIG51bWJlcnMsIGFuZCB0aHVzIG11c3QgYmUgY2FyZWZ1bCB0b1xuICAgICAgLy8gY29tcGFyZSBvcmRlciAoPj0pIHJhdGhlciB0aGFuIHN0cmljdCBlcXVhbGl0eSAoPT09KSFcbiAgICAgIGlmICh0elt0ei5sZW5ndGggLSAxXSA+PSB4MSkge1xuICAgICAgICBpZiAobWF4ID49IHgxICYmIGRvbWFpbiA9PT0gZXh0ZW50KSB7XG4gICAgICAgICAgY29uc3Qgc3RlcCA9IHRpY2tJbmNyZW1lbnQoeDAsIHgxLCB0bik7XG4gICAgICAgICAgaWYgKGlzRmluaXRlKHN0ZXApKSB7XG4gICAgICAgICAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgICAgICAgICAgeDEgPSAoTWF0aC5mbG9vcih4MSAvIHN0ZXApICsgMSkgKiBzdGVwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgICAgICAgICB4MSA9IChNYXRoLmNlaWwoeDEgKiAtc3RlcCkgKyAxKSAvIC1zdGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ei5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBhbnkgdGhyZXNob2xkcyBvdXRzaWRlIHRoZSBkb21haW4uXG4gICAgdmFyIG0gPSB0ei5sZW5ndGg7XG4gICAgd2hpbGUgKHR6WzBdIDw9IHgwKSB0ei5zaGlmdCgpLCAtLW07XG4gICAgd2hpbGUgKHR6W20gLSAxXSA+IHgxKSB0ei5wb3AoKSwgLS1tO1xuXG4gICAgdmFyIGJpbnMgPSBuZXcgQXJyYXkobSArIDEpLFxuICAgICAgICBiaW47XG5cbiAgICAvLyBJbml0aWFsaXplIGJpbnMuXG4gICAgZm9yIChpID0gMDsgaSA8PSBtOyArK2kpIHtcbiAgICAgIGJpbiA9IGJpbnNbaV0gPSBbXTtcbiAgICAgIGJpbi54MCA9IGkgPiAwID8gdHpbaSAtIDFdIDogeDA7XG4gICAgICBiaW4ueDEgPSBpIDwgbSA/IHR6W2ldIDogeDE7XG4gICAgfVxuXG4gICAgLy8gQXNzaWduIGRhdGEgdG8gYmlucyBieSB2YWx1ZSwgaWdub3JpbmcgYW55IG91dHNpZGUgdGhlIGRvbWFpbi5cbiAgICBpZiAoaXNGaW5pdGUoc3RlcCkpIHtcbiAgICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgaWYgKCh4ID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHgwIDw9IHggJiYgeCA8PSB4MSkge1xuICAgICAgICAgICAgYmluc1tNYXRoLm1pbihtLCBNYXRoLmZsb29yKCh4IC0geDApIC8gc3RlcCkpXS5wdXNoKGRhdGFbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgaWYgKCh4ID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHgwIDw9IHggJiYgeCA8PSB4MSkge1xuICAgICAgICAgICAgY29uc3QgaiA9IE1hdGguZmxvb3IoKHgwIC0geCkgKiBzdGVwKTtcbiAgICAgICAgICAgIGJpbnNbTWF0aC5taW4obSwgaiArICh0eltqXSA8PSB4KSldLnB1c2goZGF0YVtpXSk7IC8vIGhhbmRsZSBvZmYtYnktb25lIGR1ZSB0byByb3VuZGluZ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgoeCA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB4MCA8PSB4ICYmIHggPD0geDEpIHtcbiAgICAgICAgICBiaW5zW2Jpc2VjdCh0eiwgeCwgMCwgbSldLnB1c2goZGF0YVtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmlucztcbiAgfVxuXG4gIGhpc3RvZ3JhbS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB2YWx1ZTtcbiAgfTtcblxuICBoaXN0b2dyYW0uZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoW19bMF0sIF9bMV1dKSwgaGlzdG9ncmFtKSA6IGRvbWFpbjtcbiAgfTtcblxuICBoaXN0b2dyYW0udGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudChzbGljZS5jYWxsKF8pKSA6IGNvbnN0YW50KF8pLCBoaXN0b2dyYW0pIDogdGhyZXNob2xkO1xuICB9O1xuXG4gIHJldHVybiBoaXN0b2dyYW07XG59XG4iLCJpbXBvcnQge3RpY2tJbmNyZW1lbnR9IGZyb20gXCIuL3RpY2tzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5pY2Uoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIGxldCBwcmVzdGVwO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgaWYgKHN0ZXAgPT09IHByZXN0ZXAgfHwgc3RlcCA9PT0gMCB8fCAhaXNGaW5pdGUoc3RlcCkpIHtcbiAgICAgIHJldHVybiBbc3RhcnQsIHN0b3BdO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA+IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgfVxuICAgIHByZXN0ZXAgPSBzdGVwO1xuICB9XG59XG4iLCJpbXBvcnQgeyBEYXRhSXRlbSwgUGFsZXR0ZSwgUEFMRVRURVMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgKiBhcyBIZWxwZXJzIGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgKiBhcyBEMyBmcm9tICdkMyc7XG5cbmV4cG9ydCBjb25zdCBkcmF3Q29udGlub3VzID0gKFxuICBtYXBTdmc6IFNWR0VsZW1lbnQsXG4gIGRhdGE6IERhdGFJdGVtW10sXG4gIHBhbGV0dGU6IFBhbGV0dGVcbikgPT4ge1xuICBjb25zdCBbbWluLCBtYXhdID0gRDMuZXh0ZW50KGRhdGEsIChkKSA9PiBkLnZhbHVlKTtcbiAgY29uc3Qgc2NhbGUgPSBEMy5zY2FsZUxpbmVhcigpXG4gICAgLmRvbWFpbihbbWluLCBtYXhdKVxuICAgIC5yYW5nZShQQUxFVFRFU1twYWxldHRlXSBhcyBhbnkpO1xuXG4gIGRhdGEuZm9yRWFjaCgoeyBjb3VudHJ5LCB2YWx1ZSB9KSA9PiB7XG4gICAgY29uc3QgY29kZSA9IEhlbHBlcnMubWFwQ291bnRyeUNvZGUoY291bnRyeSk7XG4gICAgY29uc3QgZWxlbWVudCA9IEQzLnNlbGVjdChgIyR7Y29kZX1gKTtcbiAgICBlbGVtZW50LnN0eWxlKCdmaWxsJywgc2NhbGUodmFsdWUpKTtcbiAgfSk7XG5cbiAgY29uc3QgbGVnZW5kID0gRDMuc2VsZWN0KG1hcFN2Zykuc2VsZWN0KCcjY2hhcnQtbGVnZW5kJyk7XG5cbiAgbGVnZW5kLnNlbGVjdEFsbCgnKicpLnJlbW92ZSgpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=