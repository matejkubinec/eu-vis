(()=>{"use strict";var t,n;!function(t){t.Red="red",t.Pink="pink",t.Purple="purple",t.DeepPurple="deepPurple",t.Indigo="indigo",t.Blue="blue",t.LightBlue="lightBlue",t.Cyan="cyan",t.Teal="teal",t.Green="green",t.LightGreen="lightGreen",t.Lime="lime",t.Yellow="yellow",t.Amber="amber",t.Orange="orange",t.DeepOrange="deepOrange",t.Brown="brown",t.Grey="grey",t.BlueGrey="blueGrey"}(n||(n={}));var e,r,i=((t={})[n.Red]=["#ffebee","#b71c1c"],t[n.Pink]=["#fce4ec","#880e4f"],t[n.Purple]=["#f3e5f5","#4a148c"],t[n.DeepPurple]=["#ede7f6","#311b92"],t[n.Indigo]=["#e8eaf6","#1a237e"],t[n.Blue]=["#e3f2fd","#0d47a1"],t[n.LightBlue]=["#e1f5fe","#01579b"],t[n.Cyan]=["#e0f7fa","#006064"],t[n.Teal]=["#e0f2f1","#004d40"],t[n.Green]=["#e8f5e9","#1b5e20"],t[n.LightGreen]=["#f1f8e9","#33691e"],t[n.Lime]=["#f9fbe7","#827717"],t[n.Yellow]=["#fffde7","#f57f17"],t[n.Amber]=["#fff8e1","#ff6f00"],t[n.Orange]=["#fff3e0","#e65100"],t[n.DeepOrange]=["#fbe9e7","#bf360c"],t[n.Brown]=["#efebe9","#3e2723"],t[n.Grey]=["#fafafa","#212121"],t[n.BlueGrey]=["#eceff1","#263238"],t);!function(t){t.BE="BE",t.BG="BG",t.CZ="CZ",t.DK="DK",t.DE="DE",t.EE="EE",t.IE="IE",t.EL="EL",t.ES="ES",t.FR="FR",t.HR="HR",t.IT="IT",t.CY="CY",t.LV="LV",t.LT="LT",t.LU="LU",t.HU="HU",t.MT="MT",t.NL="NL",t.AT="AT",t.PL="PL",t.PT="PT",t.RO="RO",t.SI="SI",t.SK="SK",t.FI="FI",t.SE="SE"}(e||(e={})),Object.keys(e),function(t){t.Continous="continous",t.Bins="bins"}(r||(r={}));var o=[{country:e.BE,value:5.4},{country:e.BG,value:4.2},{country:e.CZ,value:2},{country:e.DK,value:5},{country:e.DE,value:3.2},{country:e.EE,value:4.4},{country:e.IE,value:5},{country:e.EL,value:17.3},{country:e.ES,value:14.1},{country:e.FR,value:8.5},{country:e.HR,value:6.6},{country:e.IT,value:10},{country:e.CY,value:7.1},{country:e.LV,value:6.3},{country:e.LT,value:6.3},{country:e.LU,value:5.6},{country:e.HU,value:3.4},{country:e.MT,value:3.4},{country:e.NL,value:3.4},{country:e.AT,value:4.5},{country:e.PL,value:3.3},{country:e.PT,value:6.5},{country:e.RO,value:3.9},{country:e.SI,value:4.5},{country:e.SK,value:5.8},{country:e.FI,value:6.7},{country:e.SE,value:6.8}];function a(t,n){let e,r;if(void 0===n)for(const n of t)null!=n&&(void 0===e?n>=n&&(e=r=n):(e>n&&(e=n),r<n&&(r=n)));else{let i=-1;for(let o of t)null!=(o=n(o,++i,t))&&(void 0===e?o>=o&&(e=r=o):(e>o&&(e=o),r<o&&(r=o)))}return[e,r]}var u=Array.prototype,l=u.slice;function s(t,n){return null==t||null==n?NaN:t<n?-1:t>n?1:t>=n?0:NaN}function c(t,n){return null==t||null==n?NaN:n<t?-1:n>t?1:n>=t?0:NaN}function f(t){let n,e,r;function i(t,r,i=0,o=t.length){if(i<o){if(0!==n(r,r))return o;do{const n=i+o>>>1;e(t[n],r)<0?i=n+1:o=n}while(i<o)}return i}return 2!==t.length?(n=s,e=(n,e)=>s(t(n),e),r=(n,e)=>t(n)-e):(n=t===s||t===c?t:h,e=t,r=t),{left:i,center:function(t,n,e=0,o=t.length){const a=i(t,n,e,o-1);return a>e&&r(t[a-1],n)>-r(t[a],n)?a-1:a},right:function(t,r,i=0,o=t.length){if(i<o){if(0!==n(r,r))return o;do{const n=i+o>>>1;e(t[n],r)<=0?i=n+1:o=n}while(i<o)}return i}}}function h(){return 0}u.map;const p=f(s),d=p.right,y=(p.left,f((function(t){return null===t?NaN:+t})).center,d);function v(t){return()=>t}function g(t){return t}var m=Math.sqrt(50),w=Math.sqrt(10),_=Math.sqrt(2);function b(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=x(t,n,e))||!isFinite(a))return[];if(a>0){let e=Math.round(t/a),r=Math.round(n/a);for(e*a<t&&++e,r*a>n&&--r,o=new Array(i=r-e+1);++u<i;)o[u]=(e+u)*a}else{a=-a;let e=Math.round(t*a),r=Math.round(n*a);for(e/a<t&&++e,r/a>n&&--r,o=new Array(i=r-e+1);++u<i;)o[u]=(e+u)/a}return r&&o.reverse(),o}function x(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=m?10:o>=w?5:o>=_?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=m?10:o>=w?5:o>=_?2:1)}function M(t){return Math.ceil(Math.log(function(t,n){let e=0;for(let n of t)null!=n&&(n=+n)>=n&&++e;return e}(t))/Math.LN2)+1}function A(){}function k(t){return null==t?A:function(){return this.querySelector(t)}}function N(t){return null==t?[]:Array.isArray(t)?t:Array.from(t)}function E(){return[]}function S(t){return null==t?E:function(){return this.querySelectorAll(t)}}function L(t){return function(){return this.matches(t)}}function C(t){return function(n){return n.matches(t)}}var $=Array.prototype.find;function D(){return this.firstElementChild}var P=Array.prototype.filter;function T(){return Array.from(this.children)}function q(t){return new Array(t.length)}function B(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function I(t){return function(){return t}}function O(t,n,e,r,i,o){for(var a,u=0,l=n.length,s=o.length;u<s;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new B(t,o[u]);for(;u<l;++u)(a=n[u])&&(i[u]=a)}function R(t,n,e,r,i,o,a){var u,l,s,c=new Map,f=n.length,h=o.length,p=new Array(f);for(u=0;u<f;++u)(l=n[u])&&(p[u]=s=a.call(l,l.__data__,u,n)+"",c.has(s)?i[u]=l:c.set(s,l));for(u=0;u<h;++u)s=a.call(t,o[u],u,o)+"",(l=c.get(s))?(r[u]=l,l.__data__=o[u],c.delete(s)):e[u]=new B(t,o[u]);for(u=0;u<f;++u)(l=n[u])&&c.get(p[u])===l&&(i[u]=l)}function j(t){return t.__data__}function X(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function H(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}B.prototype={constructor:B,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Y="http://www.w3.org/1999/xhtml";const F={svg:"http://www.w3.org/2000/svg",xhtml:Y,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function G(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),F.hasOwnProperty(n)?{space:F[n],local:t}:t}function z(t){return function(){this.removeAttribute(t)}}function U(t){return function(){this.removeAttributeNS(t.space,t.local)}}function V(t,n){return function(){this.setAttribute(t,n)}}function K(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Z(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function W(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function J(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function Q(t){return function(){this.style.removeProperty(t)}}function tt(t,n,e){return function(){this.style.setProperty(t,n,e)}}function nt(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function et(t,n){return t.style.getPropertyValue(n)||J(t).getComputedStyle(t,null).getPropertyValue(n)}function rt(t){return function(){delete this[t]}}function it(t,n){return function(){this[t]=n}}function ot(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function at(t){return t.trim().split(/^|\s+/)}function ut(t){return t.classList||new lt(t)}function lt(t){this._node=t,this._names=at(t.getAttribute("class")||"")}function st(t,n){for(var e=ut(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function ct(t,n){for(var e=ut(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function ft(t){return function(){st(this,t)}}function ht(t){return function(){ct(this,t)}}function pt(t,n){return function(){(n.apply(this,arguments)?st:ct)(this,t)}}function dt(){this.textContent=""}function yt(t){return function(){this.textContent=t}}function vt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function gt(){this.innerHTML=""}function mt(t){return function(){this.innerHTML=t}}function wt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function _t(){this.nextSibling&&this.parentNode.appendChild(this)}function bt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function xt(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===Y&&n.documentElement.namespaceURI===Y?n.createElement(t):n.createElementNS(e,t)}}function Mt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function At(t){var n=G(t);return(n.local?Mt:xt)(n)}function kt(){return null}function Nt(){var t=this.parentNode;t&&t.removeChild(this)}function Et(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function St(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function Lt(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Ct(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.options);++i?n.length=i:delete this.__on}}}function $t(t,n,e){return function(){var r,i=this.__on,o=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(i)for(var a=0,u=i.length;a<u;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=e),void(r.value=n);this.addEventListener(t.type,o,e),r={type:t.type,name:t.name,value:n,listener:o,options:e},i?i.push(r):this.__on=[r]}}function Dt(t,n,e){var r=J(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Pt(t,n){return function(){return Dt(this,t,n)}}function Tt(t,n){return function(){return Dt(this,t,n.apply(this,arguments))}}lt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var qt=[null];function Bt(t,n){this._groups=t,this._parents=n}function It(){return new Bt([[document.documentElement]],qt)}Bt.prototype=It.prototype={constructor:Bt,select:function(t){"function"!=typeof t&&(t=k(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],l=u.length,s=r[i]=new Array(l),c=0;c<l;++c)(o=u[c])&&(a=t.call(o,o.__data__,c,u))&&("__data__"in o&&(a.__data__=o.__data__),s[c]=a);return new Bt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return N(t.apply(this,arguments))}}(t):S(t);for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],l=u.length,s=0;s<l;++s)(a=u[s])&&(r.push(t.call(a,a.__data__,s,u)),i.push(a));return new Bt(r,i)},selectChild:function(t){return this.select(null==t?D:function(t){return function(){return $.call(this.children,t)}}("function"==typeof t?t:C(t)))},selectChildren:function(t){return this.selectAll(null==t?T:function(t){return function(){return P.call(this.children,t)}}("function"==typeof t?t:C(t)))},filter:function(t){"function"!=typeof t&&(t=L(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,l=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&l.push(o);return new Bt(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,j);var e=n?R:O,r=this._parents,i=this._groups;"function"!=typeof t&&(t=I(t));for(var o=i.length,a=new Array(o),u=new Array(o),l=new Array(o),s=0;s<o;++s){var c=r[s],f=i[s],h=f.length,p=X(t.call(c,c&&c.__data__,s,r)),d=p.length,y=u[s]=new Array(d),v=a[s]=new Array(d),g=l[s]=new Array(h);e(c,f,y,v,g,p,n);for(var m,w,_=0,b=0;_<d;++_)if(m=y[_]){for(_>=b&&(b=_+1);!(w=v[b])&&++b<d;);m._next=w||null}}return(a=new Bt(a,r))._enter=u,a._exit=l,a},enter:function(){return new Bt(this._enter||this._groups.map(q),this._parents)},exit:function(){return new Bt(this._exit||this._groups.map(q),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=n&&(i=n(i))&&(i=i.selection()),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=t.selection?t.selection():t,e=this._groups,r=n._groups,i=e.length,o=r.length,a=Math.min(i,o),u=new Array(i),l=0;l<a;++l)for(var s,c=e[l],f=r[l],h=c.length,p=u[l]=new Array(h),d=0;d<h;++d)(s=c[d]||f[d])&&(p[d]=s);for(;l<i;++l)u[l]=e[l];return new Bt(u,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=H);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],l=u.length,s=i[o]=new Array(l),c=0;c<l;++c)(a=u[c])&&(s[c]=a);s.sort(n)}return new Bt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=G(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?U:z:"function"==typeof n?e.local?W:Z:e.local?K:V)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Q:"function"==typeof n?nt:tt)(t,n,null==e?"":e)):et(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?rt:"function"==typeof n?ot:it)(t,n)):this.node()[t]},classed:function(t,n){var e=at(t+"");if(arguments.length<2){for(var r=ut(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?pt:n?ft:ht)(e,n))},text:function(t){return arguments.length?this.each(null==t?dt:("function"==typeof t?vt:yt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?gt:("function"==typeof t?wt:mt)(t)):this.node().innerHTML},raise:function(){return this.each(_t)},lower:function(){return this.each(bt)},append:function(t){var n="function"==typeof t?t:At(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:At(t),r=null==n?kt:"function"==typeof n?n:k(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Nt)},clone:function(t){return this.select(t?St:Et)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=Lt(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?$t:Ct,r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var l,s=0,c=u.length;s<c;++s)for(r=0,l=u[s];r<a;++r)if((i=o[r]).type===l.type&&i.name===l.name)return l.value},dispatch:function(t,n){return this.each(("function"==typeof n?Tt:Pt)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,i=t[n],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const Ot=It;var Rt={value:()=>{}};function jt(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Xt(r)}function Xt(t){this._=t}function Ht(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function Yt(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Ft(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Rt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}Xt.prototype=jt.prototype={constructor:Xt,on:function(t,n){var e,r=this._,i=Ht(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=Ft(r[e],t.name,n);else if(null==n)for(e in r)r[e]=Ft(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=Yt(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Xt(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};const Gt=jt;var zt,Ut,Vt=0,Kt=0,Zt=0,Wt=0,Jt=0,Qt=0,tn="object"==typeof performance&&performance.now?performance:Date,nn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function en(){return Jt||(nn(rn),Jt=tn.now()+Qt)}function rn(){Jt=0}function on(){this._call=this._time=this._next=null}function an(t,n,e){var r=new on;return r.restart(t,n,e),r}function un(){Jt=(Wt=tn.now())+Qt,Vt=Kt=0;try{!function(){en(),++Vt;for(var t,n=zt;n;)(t=Jt-n._time)>=0&&n._call.call(void 0,t),n=n._next;--Vt}()}finally{Vt=0,function(){for(var t,n,e=zt,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:zt=n);Ut=t,sn(r)}(),Jt=0}}function ln(){var t=tn.now(),n=t-Wt;n>1e3&&(Qt-=n,Wt=t)}function sn(t){Vt||(Kt&&(Kt=clearTimeout(Kt)),t-Jt>24?(t<1/0&&(Kt=setTimeout(un,t-tn.now()-Qt)),Zt&&(Zt=clearInterval(Zt))):(Zt||(Wt=tn.now(),Zt=setInterval(ln,1e3)),Vt=1,nn(un)))}function cn(t,n,e){var r=new on;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}on.prototype=an.prototype={constructor:on,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?en():+e)+(null==n?0:+n),this._next||Ut===this||(Ut?Ut._next=this:zt=this,Ut=this),this._call=t,this._time=e,sn()},stop:function(){this._call&&(this._call=null,this._time=1/0,sn())}};var fn=Gt("start","end","cancel","interrupt"),hn=[];function pn(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(l){var s,c,f,h;if(1!==e.state)return u();for(s in i)if((h=i[s]).name===e.name){if(3===h.state)return cn(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(cn((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(l))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),s=0,c=-1;s<f;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++c]=h);r.length=c+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=an((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:fn,tween:hn,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function dn(t,n){var e=vn(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function yn(t,n){var e=vn(t,n);if(e.state>3)throw new Error("too late; already running");return e}function vn(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function gn(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}var mn,wn=180/Math.PI,_n={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function bn(t,n,e,r,i,o){var a,u,l;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(l=t*e+n*r)&&(e-=t*l,r-=n*l),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,l/=u),t*r<n*e&&(t=-t,n=-n,l=-l,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*wn,skewX:Math.atan(l)*wn,scaleX:a,scaleY:u}}function xn(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],l=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var l=a.push("translate(",null,n,null,e);u.push({i:l-4,x:gn(t,i)},{i:l-2,x:gn(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,l),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:gn(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,l),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:gn(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,l),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:gn(t,e)},{i:u-2,x:gn(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,l),o=a=null,function(t){for(var n,e=-1,r=l.length;++e<r;)u[(n=l[e]).i]=n.x(t);return u.join("")}}}var Mn=xn((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?_n:bn(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),An=xn((function(t){return null==t?_n:(mn||(mn=document.createElementNS("http://www.w3.org/2000/svg","g")),mn.setAttribute("transform",t),(t=mn.transform.baseVal.consolidate())?bn((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):_n)}),", ",")",")");function kn(t,n){var e,r;return function(){var i=yn(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function Nn(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=yn(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},l=0,s=i.length;l<s;++l)if(i[l].name===n){i[l]=u;break}l===s&&i.push(u)}o.tween=i}}function En(t,n,e){var r=t._id;return t.each((function(){var t=yn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return vn(t,r).value[n]}}function Sn(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function Ln(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Cn(){}var $n=.7,Dn=1/$n,Pn="\\s*([+-]?\\d+)\\s*",Tn="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",qn="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Bn=/^#([0-9a-f]{3,8})$/,In=new RegExp(`^rgb\\(${Pn},${Pn},${Pn}\\)$`),On=new RegExp(`^rgb\\(${qn},${qn},${qn}\\)$`),Rn=new RegExp(`^rgba\\(${Pn},${Pn},${Pn},${Tn}\\)$`),jn=new RegExp(`^rgba\\(${qn},${qn},${qn},${Tn}\\)$`),Xn=new RegExp(`^hsl\\(${Tn},${qn},${qn}\\)$`),Hn=new RegExp(`^hsla\\(${Tn},${qn},${qn},${Tn}\\)$`),Yn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Fn(){return this.rgb().formatHex()}function Gn(){return this.rgb().formatRgb()}function zn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=Bn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?Un(n):3===e?new Wn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Vn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Vn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=In.exec(t))?new Wn(n[1],n[2],n[3],1):(n=On.exec(t))?new Wn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Rn.exec(t))?Vn(n[1],n[2],n[3],n[4]):(n=jn.exec(t))?Vn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Xn.exec(t))?re(n[1],n[2]/100,n[3]/100,1):(n=Hn.exec(t))?re(n[1],n[2]/100,n[3]/100,n[4]):Yn.hasOwnProperty(t)?Un(Yn[t]):"transparent"===t?new Wn(NaN,NaN,NaN,0):null}function Un(t){return new Wn(t>>16&255,t>>8&255,255&t,1)}function Vn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Wn(t,n,e,r)}function Kn(t){return t instanceof Cn||(t=zn(t)),t?new Wn((t=t.rgb()).r,t.g,t.b,t.opacity):new Wn}function Zn(t,n,e,r){return 1===arguments.length?Kn(t):new Wn(t,n,e,null==r?1:r)}function Wn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Jn(){return`#${ee(this.r)}${ee(this.g)}${ee(this.b)}`}function Qn(){const t=te(this.opacity);return`${1===t?"rgb(":"rgba("}${ne(this.r)}, ${ne(this.g)}, ${ne(this.b)}${1===t?")":`, ${t})`}`}function te(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function ne(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function ee(t){return((t=ne(t))<16?"0":"")+t.toString(16)}function re(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new oe(t,n,e,r)}function ie(t){if(t instanceof oe)return new oe(t.h,t.s,t.l,t.opacity);if(t instanceof Cn||(t=zn(t)),!t)return new oe;if(t instanceof oe)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,l=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=l<.5?o+i:2-o-i,a*=60):u=l>0&&l<1?0:a,new oe(a,u,l,t.opacity)}function oe(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ae(t){return(t=(t||0)%360)<0?t+360:t}function ue(t){return Math.max(0,Math.min(1,t||0))}function le(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function se(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}Sn(Cn,zn,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:Fn,formatHex:Fn,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return ie(this).formatHsl()},formatRgb:Gn,toString:Gn}),Sn(Wn,Zn,Ln(Cn,{brighter(t){return t=null==t?Dn:Math.pow(Dn,t),new Wn(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?$n:Math.pow($n,t),new Wn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new Wn(ne(this.r),ne(this.g),ne(this.b),te(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Jn,formatHex:Jn,formatHex8:function(){return`#${ee(this.r)}${ee(this.g)}${ee(this.b)}${ee(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Qn,toString:Qn})),Sn(oe,(function(t,n,e,r){return 1===arguments.length?ie(t):new oe(t,n,e,null==r?1:r)}),Ln(Cn,{brighter(t){return t=null==t?Dn:Math.pow(Dn,t),new oe(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?$n:Math.pow($n,t),new oe(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Wn(le(t>=240?t-240:t+120,i,r),le(t,i,r),le(t<120?t+240:t-120,i,r),this.opacity)},clamp(){return new oe(ae(this.h),ue(this.s),ue(this.l),te(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=te(this.opacity);return`${1===t?"hsl(":"hsla("}${ae(this.h)}, ${100*ue(this.s)}%, ${100*ue(this.l)}%${1===t?")":`, ${t})`}`}}));const ce=t=>()=>t;function fe(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):ce(isNaN(t)?n:t)}const he=function t(n){var e=function(t){return 1==(t=+t)?fe:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ce(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Zn(t)).r,(n=Zn(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=fe(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function pe(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=Zn(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}pe((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return se((e-r/n)*n,a,i,o,u)}})),pe((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return se((e-r/n)*n,i,o,a,u)}}));var de=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,ye=new RegExp(de.source,"g");function ve(t,n){var e,r,i,o=de.lastIndex=ye.lastIndex=0,a=-1,u=[],l=[];for(t+="",n+="";(e=de.exec(t))&&(r=ye.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,l.push({i:a,x:gn(e,r)})),o=ye.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?l[0]?function(t){return function(n){return t(n)+""}}(l[0].x):function(t){return function(){return t}}(n):(n=l.length,function(t){for(var e,r=0;r<n;++r)u[(e=l[r]).i]=e.x(t);return u.join("")})}function ge(t,n){var e;return("number"==typeof n?gn:n instanceof zn?he:(e=zn(n))?(n=e,he):ve)(t,n)}function me(t){return function(){this.removeAttribute(t)}}function we(t){return function(){this.removeAttributeNS(t.space,t.local)}}function _e(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function be(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function xe(t,n,e){var r,i,o;return function(){var a,u,l=e(this);if(null!=l)return(a=this.getAttribute(t))===(u=l+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,l));this.removeAttribute(t)}}function Me(t,n,e){var r,i,o;return function(){var a,u,l=e(this);if(null!=l)return(a=this.getAttributeNS(t.space,t.local))===(u=l+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,l));this.removeAttributeNS(t.space,t.local)}}function Ae(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function ke(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Ne(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&ke(t,i)),e}return i._value=n,i}function Ee(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&Ae(t,i)),e}return i._value=n,i}function Se(t,n){return function(){dn(this,t).delay=+n.apply(this,arguments)}}function Le(t,n){return n=+n,function(){dn(this,t).delay=n}}function Ce(t,n){return function(){yn(this,t).duration=+n.apply(this,arguments)}}function $e(t,n){return n=+n,function(){yn(this,t).duration=n}}function De(t,n){if("function"!=typeof n)throw new Error;return function(){yn(this,t).ease=n}}function Pe(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?dn:yn;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var Te=Ot.prototype.constructor;function qe(t){return function(){this.style.removeProperty(t)}}function Be(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Ie(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&Be(t,o,e)),r}return o._value=n,o}function Oe(t){return function(n){this.textContent=t.call(this,n)}}function Re(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Oe(r)),n}return r._value=t,r}var je=0;function Xe(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function He(){return++je}var Ye=Ot.prototype;Xe.prototype=function(t){return Ot().transition(t)}.prototype={constructor:Xe,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=k(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,l,s=r[a],c=s.length,f=o[a]=new Array(c),h=0;h<c;++h)(u=s[h])&&(l=t.call(u,u.__data__,h,s))&&("__data__"in u&&(l.__data__=u.__data__),f[h]=l,pn(f[h],n,e,h,f,vn(u,e)));return new Xe(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=S(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var l,s=r[u],c=s.length,f=0;f<c;++f)if(l=s[f]){for(var h,p=t.call(l,l.__data__,f,s),d=vn(l,e),y=0,v=p.length;y<v;++y)(h=p[y])&&pn(h,n,e,y,p,d);o.push(p),a.push(l)}return new Xe(o,a,n,e)},selectChild:Ye.selectChild,selectChildren:Ye.selectChildren,filter:function(t){"function"!=typeof t&&(t=L(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,l=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&l.push(o);return new Xe(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var l,s=n[u],c=e[u],f=s.length,h=a[u]=new Array(f),p=0;p<f;++p)(l=s[p]||c[p])&&(h[p]=l);for(;u<r;++u)a[u]=n[u];return new Xe(a,this._parents,this._name,this._id)},selection:function(){return new Te(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=He(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],l=u.length,s=0;s<l;++s)if(a=u[s]){var c=vn(a,n);pn(a,t,e,s,u,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Xe(r,this._parents,t,e)},call:Ye.call,nodes:Ye.nodes,node:Ye.node,size:Ye.size,empty:Ye.empty,each:Ye.each,on:function(t,n){var e=this._id;return arguments.length<2?vn(this.node(),e).on.on(t):this.each(Pe(e,t,n))},attr:function(t,n){var e=G(t),r="transform"===e?An:ge;return this.attrTween(t,"function"==typeof n?(e.local?Me:xe)(e,r,En(this,"attr."+t,n)):null==n?(e.local?we:me)(e):(e.local?be:_e)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=G(t);return this.tween(e,(r.local?Ne:Ee)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Mn:ge;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=et(this,t),a=(this.style.removeProperty(t),et(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,qe(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=et(this,t),u=e(this),l=u+"";return null==u&&(this.style.removeProperty(t),l=u=et(this,t)),a===l?null:a===r&&l===i?o:(i=l,o=n(r=a,u))}}(t,r,En(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var l=yn(this,t),s=l.on,c=null==l.value[a]?o||(o=qe(n)):void 0;s===e&&i===c||(r=(e=s).copy()).on(u,i=c),l.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=et(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Ie(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(En(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Re(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=vn(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?kn:Nn)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Se:Le)(n,t)):vn(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ce:$e)(n,t)):vn(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(De(n,t)):vn(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;yn(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},l={value:function(){0==--i&&o()}};e.each((function(){var e=yn(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(l)),e.on=n})),0===i&&o()}))},[Symbol.iterator]:Ye[Symbol.iterator]};var Fe={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Ge(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}Ot.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},Ot.prototype.transition=function(t){var n,e;t instanceof Xe?(n=t._id,t=t._name):(n=He(),(e=Fe).time=en(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],l=u.length,s=0;s<l;++s)(a=u[s])&&pn(a,t,n,s,u,e||Ge(a,n));return new Xe(r,this._parents,t,n)};const{abs:ze,max:Ue,min:Ve}=Math;function Ke(t){return{type:t}}function Ze(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=tr(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}function We(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function Je(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=tr(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}function Qe(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}}function tr(t,n){var e,r,i=typeof n;return null==n||"boolean"===i?ce(n):("number"===i?gn:"string"===i?(e=zn(n))?(n=e,he):ve:n instanceof zn?he:n instanceof Date?We:(r=n,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(n)?Ze:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Je:gn:Qe))(t,n)}function nr(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}function er(t){return+t}["w","e"].map(Ke),["n","s"].map(Ke),["n","w","e","s","nw","ne","sw","se"].map(Ke);var rr=[0,1];function ir(t){return t}function or(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function ar(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=or(i,r),o=e(a,o)):(r=or(r,i),o=e(o,a)),function(t){return o(r(t))}}function ur(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=or(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=y(t,n,1,r)-1;return o[e](i[e](n))}}function lr(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function sr(){return function(){var t,n,e,r,i,o,a=rr,u=rr,l=tr,s=ir;function c(){var t,n,e,l=Math.min(a.length,u.length);return s!==ir&&(t=a[0],n=a[l-1],t>n&&(e=t,t=n,n=e),s=function(e){return Math.max(t,Math.min(n,e))}),r=l>2?ur:ar,i=o=null,f}function f(n){return null==n||isNaN(n=+n)?e:(i||(i=r(a.map(t),u,l)))(t(s(n)))}return f.invert=function(e){return s(n((o||(o=r(u,a.map(t),gn)))(e)))},f.domain=function(t){return arguments.length?(a=Array.from(t,er),c()):a.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),c()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),l=nr,c()},f.clamp=function(t){return arguments.length?(s=!!t||ir,c()):s!==ir},f.interpolate=function(t){return arguments.length?(l=t,c()):l},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,c()}}()(ir,ir)}function cr(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var fr,hr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function pr(t){if(!(n=hr.exec(t)))throw new Error("invalid format: "+t);var n;return new dr({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function dr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function yr(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function vr(t){return(t=yr(Math.abs(t)))?t[1]:NaN}function gr(t,n){var e=yr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}pr.prototype=dr.prototype,dr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const mr={"%":(t,n)=>(100*t).toFixed(n),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,n)=>t.toExponential(n),f:(t,n)=>t.toFixed(n),g:(t,n)=>t.toPrecision(n),o:t=>Math.round(t).toString(8),p:(t,n)=>gr(100*t,n),r:gr,s:function(t,n){var e=yr(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(fr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+yr(t,Math.max(0,n+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function wr(t){return t}var _r,br,xr,Mr=Array.prototype.map,Ar=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function kr(t){var n=t.domain;return t.ticks=function(t){var e=n();return b(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return function(t,n,e,r){var i,o=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=m?i*=10:o>=w?i*=5:o>=_&&(i*=2),n<t?-i:i}(t,n,e);switch((r=pr(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(vr(n)/3)))-vr(Math.abs(t)))}(o,a))||(r.precision=i),xr(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,vr(n)-vr(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-vr(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return br(r)}(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i,o=n(),a=0,u=o.length-1,l=o[a],s=o[u],c=10;for(s<l&&(i=l,l=s,s=i,i=a,a=u,u=i);c-- >0;){if((i=x(l,s,e))===r)return o[a]=l,o[u]=s,n(o);if(i>0)l=Math.floor(l/i)*i,s=Math.ceil(s/i)*i;else{if(!(i<0))break;l=Math.ceil(l*i)/i,s=Math.floor(s*i)/i}r=i}return t},t}function Nr(){var t=sr();return t.copy=function(){return lr(t,Nr())},cr.apply(t,arguments),kr(t)}function Er(t){return"string"==typeof t?new Bt([[document.querySelector(t)]],[document.documentElement]):new Bt([[t]],qt)}function Sr(t,n,e){this.k=t,this.x=n,this.y=e}_r=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?wr:(n=Mr.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=n[0],l=0;i>0&&u>0&&(l+u+1>r&&(u=Math.max(1,r-l)),o.push(t.substring(i-=u,i+u)),!((l+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?wr:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(Mr.call(t.numerals,String)),l=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"−":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=pr(t)).fill,e=t.align,f=t.sign,h=t.symbol,p=t.zero,d=t.width,y=t.comma,v=t.precision,g=t.trim,m=t.type;"n"===m?(y=!0,m="g"):mr[m]||(void 0===v&&(v=12),g=!0,m="g"),(p||"0"===n&&"="===e)&&(p=!0,n="0",e="=");var w="$"===h?i:"#"===h&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",_="$"===h?o:/[%p]/.test(m)?l:"",b=mr[m],x=/[defgprs%]/.test(m);function M(t){var i,o,l,h=w,M=_;if("c"===m)M=b(t)+M,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:b(Math.abs(t),v),g&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),A&&0==+t&&"+"!==f&&(A=!1),h=(A?"("===f?f:s:"-"===f||"("===f?"":f)+h,M=("s"===m?Ar[8+fr/3]:"")+M+(A&&"("===f?")":""),x)for(i=-1,o=t.length;++i<o;)if(48>(l=t.charCodeAt(i))||l>57){M=(46===l?a+t.slice(i+1):t.slice(i))+M,t=t.slice(0,i);break}}y&&!p&&(t=r(t,1/0));var k=h.length+t.length+M.length,N=k<d?new Array(d-k+1).join(n):"";switch(y&&p&&(t=r(N+t,N.length?d-M.length:1/0),N=""),e){case"<":t=h+t+M+N;break;case"=":t=h+N+t+M;break;case"^":t=N.slice(0,k=N.length>>1)+h+t+M+N.slice(k);break;default:t=N+h+t+M}return u(t)}return v=void 0===v?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),M.toString=function(){return t+""},M}return{format:f,formatPrefix:function(t,n){var e=f(((t=pr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(vr(n)/3))),i=Math.pow(10,-r),o=Ar[8+r/3];return function(t){return e(i*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),br=_r.format,xr=_r.formatPrefix,Sr.prototype={constructor:Sr,scale:function(t){return 1===t?this:new Sr(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Sr(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Sr(1,0,0),Sr.prototype;var Lr=function(t){switch(t){case"EL":return"gr";default:return t.toLowerCase()}},Cr=function(){var t=this;this.data=o,this.onPaletteChange=function(){t.redrawChart()},this.onModeChange=function(){t.redrawChart()},this.onSelectData=function(){t.selectDataInput.click()},this.onDataChange=function(n){return e=t,r=void 0,o=function(){var t,e;return function(t,n){var e,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],r=0}finally{e=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}(this,(function(r){return(t=n.target).files&&((e=new FileReader).readAsText(t.files[0]),e.onload=this.onDataLoaded),[2]}))},new((i=void 0)||(i=Promise))((function(t,n){function a(t){try{l(o.next(t))}catch(t){n(t)}}function u(t){try{l(o.throw(t))}catch(t){n(t)}}function l(n){n.done?t(n.value):function(t){return t instanceof i?t:new i((function(n){n(t)}))}(n.value).then(a,u)}l((o=o.apply(e,r||[])).next())}));var e,r,i,o},this.onDataLoaded=function(n){var e=String(n.target.result).split("\n").map((function(t){return{country:t.slice(0,2),value:Number.parseFloat(t.slice(3).replace(/\"/g,"").replace(",","."))}}));t.data=e,t.redrawChart()},this.onDownloadChart=function(){var n=new Blob([t.mapSvg.outerHTML]);t.downloadChartLink.href=URL.createObjectURL(n),t.downloadChartLink.click()},this.redrawChart=function(){if(0!==t.data.length){var n=t.paletteSelect.value,e=t.modeSelect.value;e==r.Bins?function(t,n,e){var r=function(){var t=g,n=a,e=M;function r(r){Array.isArray(r)||(r=Array.from(r));var i,o,u,l=r.length,s=new Array(l);for(i=0;i<l;++i)s[i]=t(r[i],i,r);var c=n(s),f=c[0],h=c[1],p=e(s,f,h);if(!Array.isArray(p)){const t=h,e=+p;if(n===a&&([f,h]=function(t,n,e){let r;for(;;){const i=x(t,n,e);if(i===r||0===i||!isFinite(i))return[t,n];i>0?(t=Math.floor(t/i)*i,n=Math.ceil(n/i)*i):i<0&&(t=Math.ceil(t*i)/i,n=Math.floor(n*i)/i),r=i}}(f,h,e)),(p=b(f,h,e))[0]<=f&&(u=x(f,h,e)),p[p.length-1]>=h)if(t>=h&&n===a){const t=x(f,h,e);isFinite(t)&&(t>0?h=(Math.floor(h/t)+1)*t:t<0&&(h=(Math.ceil(h*-t)+1)/-t))}else p.pop()}for(var d=p.length;p[0]<=f;)p.shift(),--d;for(;p[d-1]>h;)p.pop(),--d;var v,g=new Array(d+1);for(i=0;i<=d;++i)(v=g[i]=[]).x0=i>0?p[i-1]:f,v.x1=i<d?p[i]:h;if(isFinite(u)){if(u>0)for(i=0;i<l;++i)null!=(o=s[i])&&f<=o&&o<=h&&g[Math.min(d,Math.floor((o-f)/u))].push(r[i]);else if(u<0)for(i=0;i<l;++i)if(null!=(o=s[i])&&f<=o&&o<=h){const t=Math.floor((f-o)*u);g[Math.min(d,t+(p[t]<=o))].push(r[i])}}else for(i=0;i<l;++i)null!=(o=s[i])&&f<=o&&o<=h&&g[y(p,o,0,d)].push(r[i]);return g}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:v(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:v([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?v(l.call(t)):v(t),r):e},r}().value((function(t){return t.value}))(n),o=Nr().domain([0,r.length]).range(i[e]);r.forEach((function(t,n){var e=o(n);t.forEach((function(t){var n=t.country,r=Lr(n),i=document.querySelector("#".concat(r));i&&(i.style.fill=String(e))}))}));var u=function(t,n,e){if(e||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return t.concat(r||Array.prototype.slice.call(n))}([null],r,!0),s=Er(t).select("#chart-legend");s.selectAll("*").remove(),s.append("text").text("Legenda:").attr("x",87).attr("y",9).style("font-size","4px");var c=s.selectAll("item").data(u).enter().append("g");c.append("rect").attr("x",87).attr("y",(function(t,n){return 5+6*(n+1)})).attr("width",5).attr("height",5).attr("fill",(function(t,n){return t?o(n):"#eeeeee"})).style("stroke-width",.1).style("stroke","#555"),c.append("text").attr("x",93).attr("y",(function(t,n){return 5+6*(n+1)+3.5})).style("font-size","3px").text((function(t){return t?"".concat(t.x0," - ").concat(t.x1):"Dáta nedostupné"}))}(t.mapSvg,t.data,n):e===r.Continous&&function(t,n,e){var r=a(n,(function(t){return t.value})),o=r[0],u=r[1],l=Nr().domain([o,u]).range(i[e]);n.forEach((function(t){var n=t.country,e=t.value,r=Lr(n);Er("#".concat(r)).style("fill",l(e))})),Er(t).select("#chart-legend").selectAll("*").remove()}(t.mapSvg,t.data,n)}},this.initElements=function(){t.selectDataInput=document.querySelector("#upload-data-input"),t.selectDataButton=document.querySelector("#upload-data-button"),t.downloadChartButton=document.querySelector("#download-chart-button"),t.downloadChartLink=document.querySelector("#download-chart-link"),t.paletteSelect=document.querySelector("#palette-select"),t.modeSelect=document.querySelector("#mode-select"),t.mapSvg=document.querySelector("#eu-map")},this.initListeners=function(){t.selectDataButton.addEventListener("click",t.onSelectData),t.selectDataInput.addEventListener("change",t.onDataChange),t.downloadChartButton.addEventListener("click",t.onDownloadChart),t.paletteSelect.addEventListener("click",t.onPaletteChange),t.modeSelect.addEventListener("click",t.onModeChange)}};document.addEventListener("DOMContentLoaded",(function(){var t;(t=new Cr).initElements(),t.initListeners(),t.redrawChart()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,